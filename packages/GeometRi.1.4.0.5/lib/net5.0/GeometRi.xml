<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GeometRi</name>
    </assembly>
    <members>
        <member name="T:GeometRi.Box3d">
            <summary>
            Arbitrary oriented 3D box, can be degenerated with one or more dimensions equal 0.
            </summary>
        </member>
        <member name="M:GeometRi.Box3d.#ctor(GeometRi.Point3d,System.Double,System.Double,System.Double)">
            <summary>
            Default constructor, initializes unit box in the origin of the global coordinate system aligned with coordinate axes.
            </summary>
        </member>
        <member name="M:GeometRi.Box3d.#ctor(GeometRi.Coord3d)">
            <summary>
            Initializes unit box in the origin of the reference coordinate system aligned with coordinate axes.
            </summary>
            <param name="coord">Reference coordinate system.</param>
        </member>
        <member name="M:GeometRi.Box3d.#ctor(GeometRi.Point3d,System.Double,System.Double,System.Double,GeometRi.Rotation)">
            <summary>
            Initializes box with specified dimensions and orientation defined by rotation object.
            </summary>
            <param name="center">Center point of the box.</param>
            <param name="lx">First dimension.</param>
            <param name="ly">Second dimension.</param>
            <param name="lz">Third dimension.</param>
            <param name="r">Orientation of the box, defined as rotation from axis aligned position (in global CS) to final position.</param>
        </member>
        <member name="M:GeometRi.Box3d.#ctor(GeometRi.Point3d,System.Double,System.Double,System.Double,GeometRi.Coord3d)">
            <summary>
            Initializes axis aligned box in local coordinate system.
            </summary>
            <param name="center">Center point of the box.</param>
            <param name="lx">First dimension.</param>
            <param name="ly">Second dimension.</param>
            <param name="lz">Third dimension.</param>
            <param name="coord">Local coordinate system.</param>
        </member>
        <member name="M:GeometRi.Box3d.Copy">
            <summary>
            Creates copy of the object
            </summary>
        </member>
        <member name="P:GeometRi.Box3d.Center">
            <summary>
            Center point of the box.
            </summary>
        </member>
        <member name="P:GeometRi.Box3d.L1">
            <summary>
            First dimension.
            </summary>
        </member>
        <member name="P:GeometRi.Box3d.L2">
            <summary>
            Second dimension.
            </summary>
        </member>
        <member name="P:GeometRi.Box3d.L3">
            <summary>
            Third dimension.
            </summary>
        </member>
        <member name="P:GeometRi.Box3d.V1">
            <summary>
            Orientation of the first dimension of the box.
            </summary>
        </member>
        <member name="P:GeometRi.Box3d.V2">
            <summary>
            Orientation of the second dimension of the box.
            </summary>
        </member>
        <member name="P:GeometRi.Box3d.V3">
            <summary>
            Orientation of the third dimension of the box.
            </summary>
        </member>
        <member name="P:GeometRi.Box3d.Orientation">
            <summary>
            Orientation of the box, defined as rotation from axis aligned position (in global CS) to final position.
            </summary>
        </member>
        <member name="P:GeometRi.Box3d.P1">
            <summary>
            Corner point of the box.
            </summary>
        </member>
        <member name="P:GeometRi.Box3d.P2">
            <summary>
            Corner point of the box.
            </summary>
        </member>
        <member name="P:GeometRi.Box3d.P3">
            <summary>
            Corner point of the box.
            </summary>
        </member>
        <member name="P:GeometRi.Box3d.P4">
            <summary>
            Corner point of the box.
            </summary>
        </member>
        <member name="P:GeometRi.Box3d.P5">
            <summary>
            Corner point of the box.
            </summary>
        </member>
        <member name="P:GeometRi.Box3d.P6">
            <summary>
            Corner point of the box.
            </summary>
        </member>
        <member name="P:GeometRi.Box3d.P7">
            <summary>
            Corner point of the box.
            </summary>
        </member>
        <member name="P:GeometRi.Box3d.P8">
            <summary>
            Corner point of the box.
            </summary>
        </member>
        <member name="P:GeometRi.Box3d.ListOfPoints">
            <summary>
            List of corner points.
            </summary>
        </member>
        <member name="P:GeometRi.Box3d.ListOfTriangles">
            <summary>
            List of triangles forming the box's surface
            </summary>
        </member>
        <member name="P:GeometRi.Box3d.ListOfPlanes">
            <summary>
            List of planes forming the box's surface
            </summary>
        </member>
        <member name="P:GeometRi.Box3d.ListOfEdges">
            <summary>
            List of edges forming the box
            </summary>
        </member>
        <member name="P:GeometRi.Box3d.Volume">
            <summary>
            Volume of the box.
            </summary>
        </member>
        <member name="P:GeometRi.Box3d.Area">
            <summary>
            Surface area of the box.
            </summary>
        </member>
        <member name="P:GeometRi.Box3d.Diagonal">
            <summary>
            Length of the box diagonal.
            </summary>
        </member>
        <member name="P:GeometRi.Box3d.IsAxisAligned">
            <summary>
            True if box is axis aligned
            </summary>
        </member>
        <member name="P:GeometRi.Box3d.MinimumBoundingBox">
            <summary>
            Return minimum bounding box.
            </summary>
        </member>
        <member name="M:GeometRi.Box3d.BoundingBox(GeometRi.Coord3d)">
            <summary>
            Return Axis Aligned Bounding Box (AABB) in given coordinate system.
            </summary>
        </member>
        <member name="P:GeometRi.Box3d.BoundingSphere">
            <summary>
            Return bounding sphere.
            </summary>
        </member>
        <member name="M:GeometRi.Box3d.AABB(System.Collections.Generic.List{GeometRi.Point3d},GeometRi.Coord3d)">
            <summary>
            Return Axis Aligned Bounding Box (AABB) for a cloud of points.
            </summary>
        </member>
        <member name="M:GeometRi.Box3d.AABB(GeometRi.Point3d[],GeometRi.Coord3d)">
            <summary>
            Return Axis Aligned Bounding Box (AABB) for a cloud of points.
            </summary>
        </member>
        <member name="M:GeometRi.Box3d.IntersectionWith(GeometRi.Line3d)">
            <summary>
            Get intersection of line with box.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Box3d.IntersectionWith(GeometRi.Ray3d)">
            <summary>
            Get intersection of ray with box.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Box3d.IntersectionWith(GeometRi.Segment3d)">
            <summary>
            Get intersection of segment with box.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Box3d.Intersects(GeometRi.Triangle)">
            <summary>
            Check intersection of box with triangle
            </summary>
        </member>
        <member name="M:GeometRi.Box3d.Intersects(GeometRi.Box3d)">
            <summary>
            Check intersection of two boxes (only for AABB boxes, no check is performed for speed)
            </summary>
        </member>
        <member name="M:GeometRi.Box3d.LocalCoord">
            <summary>
            Local coordinate system with origin in box's center and aligned with box
            </summary>
        </member>
        <member name="M:GeometRi.Box3d.ClosestPoint(GeometRi.Point3d)">
            <summary>
            Point on box (including interior points) closest to target point "p".
            </summary>
        </member>
        <member name="M:GeometRi.Box3d.AABBClosestPoint(GeometRi.Point3d)">
            <summary>
            Point on axis aligned box (including interior points) closest to target point "p".
            </summary>
        </member>
        <member name="M:GeometRi.Box3d.DistanceTo(GeometRi.Point3d)">
            <summary>
            Distance from box to point (zero will be returned for point located inside box)
            </summary>
        </member>
        <member name="M:GeometRi.Box3d.AABBDistanceTo(GeometRi.Point3d)">
            <summary>
            Distance from axis aligned box to point (zero will be returned for point located inside box)
            </summary>
        </member>
        <member name="M:GeometRi.Box3d.DistanceTo(GeometRi.Sphere)">
            <summary>
            Shortest distance from box to sphere
            </summary>
        </member>
        <member name="M:GeometRi.Box3d.DistanceTo(GeometRi.Circle3d)">
            <summary>
            Shortest distance from box to circle
            </summary>
        </member>
        <member name="M:GeometRi.Box3d.Intersects(GeometRi.Circle3d)">
            <summary>
            Intersection check between circle and box
            </summary>
        </member>
        <member name="M:GeometRi.Box3d.Translate(GeometRi.Vector3d)">
            <summary>
            Translate box by a vector
            </summary>
        </member>
        <member name="M:GeometRi.Box3d.Rotate(GeometRi.Rotation,GeometRi.Point3d)">
            <summary>
            Rotate box around point 'p' as a rotation center.
            </summary>
        </member>
        <member name="M:GeometRi.Box3d.ReflectIn(GeometRi.Point3d)">
            <summary>
            Reflect box in given point
            <para>The order of corner points will be changed during reflection operation.</para>
            </summary>
        </member>
        <member name="M:GeometRi.Box3d.ReflectIn(GeometRi.Line3d)">
            <summary>
            Reflect box in given line
            <para>The order of corner points will be changed during reflection operation.</para>
            </summary>
        </member>
        <member name="M:GeometRi.Box3d.ReflectIn(GeometRi.Plane3d)">
            <summary>
            Reflect box in given plane
            <para>The order of corner points will be changed during reflection operation.</para>
            </summary>
        </member>
        <member name="M:GeometRi.Box3d.Equals(System.Object)">
            <summary>
            Determines whether two objects are equal.
            </summary>
        </member>
        <member name="M:GeometRi.Box3d.GetHashCode">
            <summary>
            Returns the hashcode for the object.
            </summary>
        </member>
        <member name="M:GeometRi.Box3d.ToString">
            <summary>
            String representation of an object in global coordinate system.
            </summary>
        </member>
        <member name="M:GeometRi.Box3d.ToString(GeometRi.Coord3d)">
            <summary>
            String representation of an object in reference coordinate system.
            </summary>
        </member>
        <member name="T:GeometRi.Circle3d">
            <summary>
            Circle in 3D space defined by center point, radius and normal vector.
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.#ctor(GeometRi.Point3d,System.Double,GeometRi.Vector3d)">
            <summary>
            Initializes circle instance using center point, radius and normal vector.
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.#ctor(GeometRi.Point3d,GeometRi.Point3d,GeometRi.Point3d)">
            <summary>
            Initializes circle passing through three points.
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.Copy">
            <summary>
            Creates copy of the object
            </summary>
        </member>
        <member name="P:GeometRi.Circle3d.Center">
            <summary>
            Center of the circle
            </summary>
        </member>
        <member name="P:GeometRi.Circle3d.R">
            <summary>
            Radius of the circle
            </summary>
        </member>
        <member name="P:GeometRi.Circle3d.Normal">
            <summary>
            Normal of the circle
            </summary>
        </member>
        <member name="P:GeometRi.Circle3d.Area">
            <summary>
            Area of the circle.
            </summary>
        </member>
        <member name="P:GeometRi.Circle3d.ToEllipse">
            <summary>
            Convert circle to ellipse object.
            </summary>
        </member>
        <member name="P:GeometRi.Circle3d.ToPlane">
            <summary>
            Convert circle to plane object.
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.IsParallelTo(GeometRi.ILinearObject)">
            <summary>
            Check if two objects are parallel
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.IsNotParallelTo(GeometRi.ILinearObject)">
            <summary>
            Check if two objects are NOT parallel
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.IsOrthogonalTo(GeometRi.ILinearObject)">
            <summary>
            Check if two objects are orthogonal
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.IsParallelTo(GeometRi.IPlanarObject)">
            <summary>
            Check if two objects are parallel
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.IsNotParallelTo(GeometRi.IPlanarObject)">
            <summary>
            Check if two objects are NOT parallel
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.IsOrthogonalTo(GeometRi.IPlanarObject)">
            <summary>
            Check if two objects are orthogonal
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.IsCoplanarTo(GeometRi.IPlanarObject)">
            <summary>
            Check if two objects are coplanar
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.IsCoplanarTo(GeometRi.ILinearObject)">
            <summary>
            Check if two objects are coplanar
            </summary>
        </member>
        <member name="P:GeometRi.Circle3d.MinimumBoundingBox">
            <summary>
            Return minimum bounding box.
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.BoundingBox(GeometRi.Coord3d)">
            <summary>
            Return Axis Aligned Bounding Box (AABB) in given coordinate system.
            </summary>
        </member>
        <member name="P:GeometRi.Circle3d.BoundingSphere">
            <summary>
            Return bounding sphere.
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.IsInside(GeometRi.Box3d)">
            <summary>
            Check if circle is located inside box with tolerance defined by global tolerance property (GeometRi3D.Tolerance).
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.ParametricForm(System.Double)">
            <summary>
            Returns point on circle for given parameter 't' (0 &lt;= t &lt; 2Pi)
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.DistanceTo(GeometRi.Plane3d)">
            <summary>
            Distance from circle to plane
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.DistanceTo(GeometRi.Plane3d,GeometRi.Point3d@,GeometRi.Point3d@)">
            <summary>
            Shortest distance between plane and circle
            <para> The output points may be not unique in case of parallel or intersecting objects.</para>
            </summary>
            <param name="p">Target plane</param>
            <param name="point_on_circle">Closest point on circle</param>
            <param name="point_on_plane">Closest point on plane</param>
        </member>
        <member name="M:GeometRi.Circle3d.DistanceTo(GeometRi.Point3d)">
            <summary>
            Shortest distance from point to circle (including interior points)
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.ClosestPoint(GeometRi.Point3d)">
            <summary>
            Point on circle (including interior points) closest to target point "p".
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.DistanceTo(GeometRi.Circle3d)">
            <summary>
            Shortest distance between two circles (including interior points) (approximate solution)
            <para> Default tolerance for numerical solution: GeometRi3D.DefaultTolerance.</para>
            </summary>
            <param name="c">Target circle</param>
        </member>
        <member name="M:GeometRi.Circle3d.DistanceTo(GeometRi.Circle3d,System.Double)">
            <summary>
            Shortest distance between two circles (including interior points) (approximate solution)
            </summary>
            <param name="c">Target circle</param>
            <param name="tolerance">Tolerance for numerical solution, default GeometRi3D.DefaultTolerance</param>
        </member>
        <member name="M:GeometRi.Circle3d.DistanceTo(GeometRi.Circle3d,GeometRi.Point3d@,GeometRi.Point3d@)">
            <summary>
            Shortest distance between two circles (including interior points) (approximate solution)
            <para> The output points may be not unique in case of parallel or intersecting circles.</para>
            <para> Default tolerance for numerical solution: GeometRi3D.DefaultTolerance.</para>
            </summary>
            <param name="c">Target circle</param>
            <param name="p1">Closest point on source circle</param>
            <param name="p2">Closest point on target circle</param>
        </member>
        <member name="M:GeometRi.Circle3d.DistanceTo(GeometRi.Circle3d,GeometRi.Point3d@,GeometRi.Point3d@,System.Double)">
            <summary>
            Shortest distance between two circles (including interior points) (approximate solution)
            <para> The output points may be not unique in case of parallel or intersecting circles.</para>
            </summary>
            <param name="c">Target circle</param>
            <param name="p1">Closest point on source circle</param>
            <param name="p2">Closest point on target circle</param>
            <param name="tolerance">Tolerance for numerical solution, default GeometRi3D.DefaultTolerance</param>
        </member>
        <member name="M:GeometRi.Circle3d.DistanceTo(GeometRi.Sphere)">
            <summary>
            Shortest distance between circle and sphere (including interior points) (approximate solution)
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.DistanceTo(GeometRi.Sphere,System.Double)">
            <summary>
            Shortest distance between circle and sphere (including interior points) (approximate solution)
            </summary>
            <param name="s">Target sphere</param>
            <param name="tolerance">Tolerance for numerical solution, default GeometRi3D.DefaultTolerance</param>
        </member>
        <member name="M:GeometRi.Circle3d.DistanceTo(GeometRi.Sphere,GeometRi.Point3d@,GeometRi.Point3d@)">
            <summary>
            Shortest distance between circle and sphere (including interior points) (approximate solution)
            <para> The output points may be not unique in case of intersecting objects.</para>
            <para> Default tolerance for numerical solution: GeometRi3D.DefaultTolerance.</para>
            </summary>
            <param name="s">Target sphere</param>
            <param name="p1">Closest point on circle</param>
            <param name="p2">Closest point on sphere</param>
        </member>
        <member name="M:GeometRi.Circle3d.DistanceTo(GeometRi.Sphere,GeometRi.Point3d@,GeometRi.Point3d@,System.Double)">
            <summary>
            Shortest distance between circle and sphere (including interior points) (approximate solution)
            <para> The output points may be not unique in case of intersecting objects.</para>
            </summary>
            <param name="s">Target sphere</param>
            <param name="p1">Closest point on circle</param>
            <param name="p2">Closest point on sphere</param>
            <param name="tolerance">Tolerance for numerical solution, default GeometRi3D.DefaultTolerance</param>
        </member>
        <member name="M:GeometRi.Circle3d.DistanceTo(GeometRi.Line3d)">
            <summary>
            Shortest distance between line and circle (including interior points)
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.DistanceToBoundary(GeometRi.Line3d)">
            <summary>
            Shortest distance between line and circle (excluding interior points)
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.DistanceTo(GeometRi.Line3d,GeometRi.Point3d@,GeometRi.Point3d@)">
            <summary>
            Shortest distance between line and circle (including interior points)
            </summary>
            <param name="l">Target line</param>
            <param name="point_on_circle">Closest point on circle</param>
            <param name="point_on_line">Closest point on line</param>
        </member>
        <member name="M:GeometRi.Circle3d.DistanceToBoundary(GeometRi.Line3d,GeometRi.Point3d@,GeometRi.Point3d@)">
            <summary>
            Shortest distance between line and circle (excluding interior points)
            </summary>
            <param name="l">Target line</param>
            <param name="point_on_circle">Closest point on circle</param>
            <param name="point_on_line">Closest point on line</param>
        </member>
        <member name="M:GeometRi.Circle3d.DistanceTo(GeometRi.Ray3d)">
            <summary>
            Shortest distance between ray and circle (including interior points)
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.DistanceTo(GeometRi.Ray3d,GeometRi.Point3d@,GeometRi.Point3d@)">
            <summary>
            Shortest distance between ray and circle (including interior points)
            </summary>
            <param name="r">Target ray</param>
            <param name="point_on_circle">Closest point on circle</param>
            <param name="point_on_ray">Closest point on ray</param>
        </member>
        <member name="M:GeometRi.Circle3d.DistanceTo(GeometRi.Segment3d)">
            <summary>
            Shortest distance between segment and circle (including interior points)
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.DistanceTo(GeometRi.Segment3d,GeometRi.Point3d@,GeometRi.Point3d@)">
            <summary>
            Shortest distance between segment and circle (including interior points)
            </summary>
            <param name="s">Target segment</param>
            <param name="point_on_circle">Closest point on circle</param>
            <param name="point_on_segment">Closest point on segment</param>
        </member>
        <member name="M:GeometRi.Circle3d._distance_circle_to_line(GeometRi.Line3d,GeometRi.Point3d@,GeometRi.Point3d@)">
            <summary>
            Shortest distance between line and circle (including interior points)
            </summary>
            <param name="l">Target line</param>
            <param name="p1">Closest point on circle</param>
            <param name="p2">Closest point on line</param>
        </member>
        <member name="M:GeometRi.Circle3d._distance_circle_boundary_to_line(GeometRi.Line3d,GeometRi.Point3d@,GeometRi.Point3d@)">
            <summary>
            Shortest distance between line and circle's boundary (excluding interior points)
            (only one point will be returned for symmetrical case)
            </summary>
            <param name="l">Target line</param>
            <param name="point_on_circle">Closest point on circle</param>
            <param name="point_on_line">Closest point on line</param>
        </member>
        <member name="M:GeometRi.Circle3d.DistanceTo(GeometRi.Triangle)">
            <summary>
            Shortest distance between triangle and circle (including interior points)
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.DistanceTo(GeometRi.Triangle,GeometRi.Point3d@,GeometRi.Point3d@)">
            <summary>
            Shortest distance between triangle and circle (including interior points)
            </summary>
            <param name="t">Target triangle</param>
            <param name="point_on_circle">Closest point on circle</param>
            <param name="point_on_triangle">Closest point on triangle</param>
        </member>
        <member name="M:GeometRi.Circle3d.DistanceTo(GeometRi.Box3d)">
            <summary>
            Shortest distance from circle to box
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.Intersects(GeometRi.Sphere)">
            <summary>
            Intersection check between circle and sphere
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.Intersects(GeometRi.Circle3d)">
            <summary>
            Intersection check between two circles
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.Intersects(GeometRi.Triangle)">
            <summary>
            Intersection check between circle and triangle
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.Intersects(GeometRi.Box3d)">
            <summary>
            Intersection check between circle and box
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.Intersects(GeometRi.Segment3d)">
            <summary>
            Intersection check between circle and segment
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.ProjectionTo(GeometRi.Plane3d)">
            <summary>
            Orthogonal projection of the circle to plane
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.ProjectionTo(GeometRi.Line3d)">
            <summary>
            Orthogonal projection of the circle to line
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.IntersectionWith(GeometRi.Line3d)">
            <summary>
            Intersection of circle with line.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.IntersectionWith(GeometRi.Segment3d)">
            <summary>
            Intersection of circle with segment.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.IntersectionWith(GeometRi.Ray3d)">
            <summary>
            Intersection of circle with ray.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.IntersectionWith(GeometRi.Plane3d)">
            <summary>
            Intersection of circle with plane.
            Returns 'null' (no intersection) or object of type 'Circle3d', 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.IntersectionWith(GeometRi.Circle3d)">
            <summary>
            Intersection of two circles.
            Returns 'null' (no intersection) or object of type 'Circle3d', 'Point3d' or 'Segment3d'.
            In 2D (coplanar circles) the segment will define two intersection points.
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.AngleTo(GeometRi.ILinearObject)">
            <summary>
            Angle between two objects in radians (0 &lt; angle &lt; Pi)
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.AngleToDeg(GeometRi.ILinearObject)">
            <summary>
            Angle between two objects in degrees (0 &lt; angle &lt; 180)
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.AngleTo(GeometRi.IPlanarObject)">
            <summary>
            Angle between two objects in radians (0 &lt; angle &lt; Pi)
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.AngleToDeg(GeometRi.IPlanarObject)">
            <summary>
            Angle between two objects in degrees (0 &lt; angle &lt; 180)
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.Translate(GeometRi.Vector3d)">
            <summary>
            Translate circle by a vector
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.Rotate(GeometRi.Matrix3d)">
            <summary>
            Rotate circle by a given rotation matrix
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.Rotate(GeometRi.Matrix3d,GeometRi.Point3d)">
            <summary>
            Rotate circle by a given rotation matrix around point 'p' as a rotation center
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.Rotate(GeometRi.Rotation,GeometRi.Point3d)">
            <summary>
            Rotate circle around point 'p' as a rotation center
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.ReflectIn(GeometRi.Point3d)">
            <summary>
            Reflect circle in given point
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.ReflectIn(GeometRi.Line3d)">
            <summary>
            Reflect circle in given line
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.ReflectIn(GeometRi.Plane3d)">
            <summary>
            Reflect circle in given plane
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.Equals(System.Object)">
            <summary>
            Determines whether two objects are equal.
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.GetHashCode">
            <summary>
            Returns the hashcode for the object.
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.ToString">
            <summary>
            String representation of an object in global coordinate system.
            </summary>
        </member>
        <member name="M:GeometRi.Circle3d.ToString(GeometRi.Coord3d)">
            <summary>
            String representation of an object in reference coordinate system.
            </summary>
        </member>
        <member name="T:GeometRi.Coord3d">
            <summary>
            Cartesian coordinate system defined by origin and transformation matrix (in row format).
            </summary>
        </member>
        <member name="M:GeometRi.Coord3d.#ctor(System.String)">
            <summary>
            Initializes default coordinate system.
            </summary>
            <param name="name">Name of the coordinate system.</param>
        </member>
        <member name="M:GeometRi.Coord3d.#ctor(GeometRi.Point3d,GeometRi.Matrix3d,System.String)">
            <summary>
            Initializes coordinate system using origin point  and transformation matrix.
            </summary>
            <param name="p">Origin of the coordinate system.</param>
            <param name="m">Transformation matrix (in row format).</param>
            <param name="name">Name of the coordinate system.</param>
        </member>
        <member name="M:GeometRi.Coord3d.#ctor(GeometRi.Point3d,GeometRi.Vector3d,GeometRi.Vector3d,System.String)">
            <summary>
            Initializes coordinate system using origin point and two vectors.
            </summary>
            <param name="p">Origin of the coordinate system.</param>
            <param name="v1">Vector oriented along the X axis.</param>
            <param name="v2">Vector in the XY plane.</param>
            <param name="name">Name of the coordinate system.</param>
        </member>
        <member name="M:GeometRi.Coord3d.#ctor(GeometRi.Point3d,GeometRi.Point3d,GeometRi.Point3d,System.String)">
            <summary>
            Initializes coordinate system using three points.
            </summary>
            <param name="p1">Origin of the coordinate system.</param>
            <param name="p2">Point on the X axis.</param>
            <param name="p3">Point on the XY plane.</param>
            <param name="name">Name of the coordinate system.</param>
        </member>
        <member name="M:GeometRi.Coord3d.#ctor(GeometRi.Point3d,System.Double[],System.Double[],System.String)">
            <summary>
            Initializes coordinate system using origin point and two double arrays.
            </summary>
            <param name="p">Origin of the coordinate system.</param>
            <param name="d1">Vector oriented along the X axis.</param>
            <param name="d2">Vector in the XY plane.</param>
            <param name="name">Name of the coordinate system.</param>
        </member>
        <member name="M:GeometRi.Coord3d.Copy">
            <summary>
            Creates copy of the object
            </summary>
        </member>
        <member name="P:GeometRi.Coord3d.Origin">
            <summary>
            Get or Set the origin of the coordinate system
            </summary>
            <returns></returns>
        </member>
        <member name="P:GeometRi.Coord3d.Axes">
            <summary>
            Get or Set unit vectors of the axes, stored as row-matrix(3x3)
            </summary>
            <returns></returns>
        </member>
        <member name="P:GeometRi.Coord3d.Counts">
            <summary>
            Get total number of defined coordinate systems
            </summary>
        </member>
        <member name="P:GeometRi.Coord3d.Xaxis">
            <summary>
            Get X-axis
            </summary>
        </member>
        <member name="P:GeometRi.Coord3d.Yaxis">
            <summary>
            Get Y-axis
            </summary>
        </member>
        <member name="P:GeometRi.Coord3d.Zaxis">
            <summary>
            Get Z-axis
            </summary>
        </member>
        <member name="P:GeometRi.Coord3d.XY_plane">
            <summary>
            XY plane in the current coordinate system
            </summary>
        </member>
        <member name="P:GeometRi.Coord3d.XZ_plane">
            <summary>
            XZ plane in the current coordinate system
            </summary>
        </member>
        <member name="P:GeometRi.Coord3d.YZ_plane">
            <summary>
            YZ plane in the current coordinate system
            </summary>
        </member>
        <member name="M:GeometRi.Coord3d.Rotate(GeometRi.Rotation)">
            <summary>
            Rotate coordinate system
            </summary>
        </member>
        <member name="M:GeometRi.Coord3d.Rotate(GeometRi.Vector3d,System.Double)">
            <summary>
            Rotate coordinate system around rotation axis
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle (radians, counterclockwise)</param>
        </member>
        <member name="M:GeometRi.Coord3d.RotateDeg(GeometRi.Vector3d,System.Double)">
            <summary>
            Rotate coordinate system around rotation axis
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle (degrees, counterclockwise)</param>
        </member>
        <member name="M:GeometRi.Coord3d.Equals(System.Object)">
            <summary>
            Determines whether two coordinate systems are equal.
            <para>Object's references are compared for speed.</para>
            </summary>
        </member>
        <member name="M:GeometRi.Coord3d.GetHashCode">
            <summary>
            Returns the hashcode for the object.
            </summary>
        </member>
        <member name="M:GeometRi.Coord3d.ToString">
            <summary>
            String representation of an object in global coordinate system.
            </summary>
        </member>
        <member name="T:GeometRi.Ellipse">
            <summary>
            Ellipse in 3D space, defined by center point and two orthogonal vectors, major and minor semiaxes.
            </summary>
        </member>
        <member name="M:GeometRi.Ellipse.#ctor(GeometRi.Point3d,GeometRi.Vector3d,GeometRi.Vector3d)">
            <summary>
            Initializes ellipse instance using center point and two orthogonal vectors.
            </summary>
            <param name="Center">Center point.</param>
            <param name="v1">First semiaxis.</param>
            <param name="v2">Second semiaxis.</param>
        </member>
        <member name="M:GeometRi.Ellipse.Copy">
            <summary>
            Creates copy of the object
            </summary>
        </member>
        <member name="P:GeometRi.Ellipse.A">
            <summary>
            Length of the major semiaxis
            </summary>
        </member>
        <member name="P:GeometRi.Ellipse.B">
            <summary>
            Length of the minor semiaxis
            </summary>
        </member>
        <member name="P:GeometRi.Ellipse.F">
            <summary>
            Distance from center to focus
            </summary>
        </member>
        <member name="P:GeometRi.Ellipse.F1">
            <summary>
            First focus
            </summary>
        </member>
        <member name="P:GeometRi.Ellipse.F2">
            <summary>
            Second focus
            </summary>
        </member>
        <member name="P:GeometRi.Ellipse.E">
            <summary>
            Eccentricity of the ellipse
            </summary>
        </member>
        <member name="P:GeometRi.Ellipse.Perimeter">
            <summary>
            Approximate circumference of the ellipse
            </summary>
        </member>
        <member name="P:GeometRi.Ellipse.ToPlane">
            <summary>
            Convert ellipse to plane object.
            </summary>
        </member>
        <member name="M:GeometRi.Ellipse.IsParallelTo(GeometRi.ILinearObject)">
            <summary>
            Check if two objects are parallel
            </summary>
        </member>
        <member name="M:GeometRi.Ellipse.IsNotParallelTo(GeometRi.ILinearObject)">
            <summary>
            Check if two objects are NOT parallel
            </summary>
        </member>
        <member name="M:GeometRi.Ellipse.IsOrthogonalTo(GeometRi.ILinearObject)">
            <summary>
            Check if two objects are orthogonal
            </summary>
        </member>
        <member name="M:GeometRi.Ellipse.IsParallelTo(GeometRi.IPlanarObject)">
            <summary>
            Check if two objects are parallel
            </summary>
        </member>
        <member name="M:GeometRi.Ellipse.IsNotParallelTo(GeometRi.IPlanarObject)">
            <summary>
            Check if two objects are NOT parallel
            </summary>
        </member>
        <member name="M:GeometRi.Ellipse.IsOrthogonalTo(GeometRi.IPlanarObject)">
            <summary>
            Check if two objects are orthogonal
            </summary>
        </member>
        <member name="M:GeometRi.Ellipse.IsCoplanarTo(GeometRi.IPlanarObject)">
            <summary>
            Check if two objects are coplanar
            </summary>
        </member>
        <member name="M:GeometRi.Ellipse.IsCoplanarTo(GeometRi.ILinearObject)">
            <summary>
            Check if two objects are coplanar
            </summary>
        </member>
        <member name="P:GeometRi.Ellipse.MinimumBoundingBox">
            <summary>
            Return minimum bounding box.
            </summary>
        </member>
        <member name="M:GeometRi.Ellipse.BoundingBox(GeometRi.Coord3d)">
            <summary>
            Return Axis Aligned Bounding Box (AABB) in given coordinate system.
            </summary>
        </member>
        <member name="P:GeometRi.Ellipse.BoundingSphere">
            <summary>
            Return bounding sphere.
            </summary>
        </member>
        <member name="M:GeometRi.Ellipse.ParametricForm(System.Double)">
            <summary>
            Returns point on ellipse for given parameter 't' (0 &lt;= t &lt; 2Pi)
            </summary>
        </member>
        <member name="M:GeometRi.Ellipse.ProjectionTo(GeometRi.Line3d)">
            <summary>
            Orthogonal projection of ellipse to line.
            </summary>
        </member>
        <member name="M:GeometRi.Ellipse.ProjectionTo(GeometRi.Plane3d)">
            <summary>
            Orthogonal projection of the ellipse to plane
            </summary>
        </member>
        <member name="M:GeometRi.Ellipse.IntersectionWith(GeometRi.Line3d)">
            <summary>
            Intersection of ellipse with line.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Ellipse.IntersectionWith(GeometRi.Plane3d)">
            <summary>
            Intersection of ellipse with plane.
            Returns 'null' (no intersection) or object of type 'Ellipse', 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Ellipse.IntersectionWith(GeometRi.Segment3d)">
            <summary>
            Intersection of ellipse with segment.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Ellipse.IntersectionWith(GeometRi.Ray3d)">
            <summary>
            Intersection of ellipse with ray.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Ellipse.ClosestPoint(GeometRi.Point3d)">
            <summary>
            Calculates the point on the ellipse's boundary closest to given point.
            </summary>
        </member>
        <member name="M:GeometRi.Ellipse.AngleTo(GeometRi.ILinearObject)">
            <summary>
            Angle between two objects in radians (0 &lt; angle &lt; Pi)
            </summary>
        </member>
        <member name="M:GeometRi.Ellipse.AngleToDeg(GeometRi.ILinearObject)">
            <summary>
            Angle between two objects in degrees (0 &lt; angle &lt; 180)
            </summary>
        </member>
        <member name="M:GeometRi.Ellipse.AngleTo(GeometRi.IPlanarObject)">
            <summary>
            Angle between two objects in radians (0 &lt; angle &lt; Pi)
            </summary>
        </member>
        <member name="M:GeometRi.Ellipse.AngleToDeg(GeometRi.IPlanarObject)">
            <summary>
            Angle between two objects in degrees (0 &lt; angle &lt; 180)
            </summary>
        </member>
        <member name="M:GeometRi.Ellipse.Translate(GeometRi.Vector3d)">
            <summary>
            Translate ellipse by a vector
            </summary>
        </member>
        <member name="M:GeometRi.Ellipse.Rotate(GeometRi.Matrix3d)">
            <summary>
            Rotate ellipse by a given rotation matrix
            </summary>
        </member>
        <member name="M:GeometRi.Ellipse.Rotate(GeometRi.Matrix3d,GeometRi.Point3d)">
            <summary>
            Rotate ellipse by a given rotation matrix around point 'p' as a rotation center
            </summary>
        </member>
        <member name="M:GeometRi.Ellipse.Rotate(GeometRi.Rotation,GeometRi.Point3d)">
            <summary>
            Rotate ellipse around point 'p' as a rotation center.
            </summary>
        </member>
        <member name="M:GeometRi.Ellipse.ReflectIn(GeometRi.Point3d)">
            <summary>
            Reflect ellipse in given point
            </summary>
        </member>
        <member name="M:GeometRi.Ellipse.ReflectIn(GeometRi.Line3d)">
            <summary>
            Reflect ellipse in given line
            </summary>
        </member>
        <member name="M:GeometRi.Ellipse.ReflectIn(GeometRi.Plane3d)">
            <summary>
            Reflect ellipse in given plane
            </summary>
        </member>
        <member name="M:GeometRi.Ellipse.Equals(System.Object)">
            <summary>
            Determines whether two objects are equal.
            </summary>
        </member>
        <member name="M:GeometRi.Ellipse.GetHashCode">
            <summary>
            Returns the hashcode for the object.
            </summary>
        </member>
        <member name="M:GeometRi.Ellipse.ToString">
            <summary>
            String representation of an object in global coordinate system.
            </summary>
        </member>
        <member name="M:GeometRi.Ellipse.ToString(GeometRi.Coord3d)">
            <summary>
            String representation of an object in reference coordinate system.
            </summary>
        </member>
        <member name="T:GeometRi.Ellipsoid">
            <summary>
            Ellipsoid object defined by center point and three mutually orthogonal vectors.
            </summary>
        </member>
        <member name="M:GeometRi.Ellipsoid.#ctor(GeometRi.Point3d,GeometRi.Vector3d,GeometRi.Vector3d,GeometRi.Vector3d)">
            <summary>
            Initializes ellipsoid instance using center point and three orthogonal vectors.
            </summary>
            <param name="Center">Center point.</param>
            <param name="v1">First semiaxis.</param>
            <param name="v2">Second semiaxis.</param>
            <param name="v3">Third semiaxis.</param>
        </member>
        <member name="M:GeometRi.Ellipsoid.Copy">
            <summary>
            Creates copy of the object
            </summary>
        </member>
        <member name="P:GeometRi.Ellipsoid.SemiaxisA">
            <summary>
            Major semiaxis
            </summary>
        </member>
        <member name="P:GeometRi.Ellipsoid.SemiaxisB">
            <summary>
            Intermediate semiaxis
            </summary>
        </member>
        <member name="P:GeometRi.Ellipsoid.SemiaxisC">
            <summary>
            Minor semiaxis
            </summary>
        </member>
        <member name="P:GeometRi.Ellipsoid.A">
            <summary>
            Length of the major semiaxis
            </summary>
        </member>
        <member name="P:GeometRi.Ellipsoid.B">
            <summary>
            Length of the intermediate semiaxis
            </summary>
        </member>
        <member name="P:GeometRi.Ellipsoid.C">
            <summary>
            Length of the minor semiaxis
            </summary>
        </member>
        <member name="P:GeometRi.Ellipsoid.Volume">
            <summary>
            Volume of the ellipsoid
            </summary>
        </member>
        <member name="P:GeometRi.Ellipsoid.Area">
            <summary>
            Approximate surface area of the ellipsoid (accurate up to 1.061%).
            </summary>
        </member>
        <member name="P:GeometRi.Ellipsoid.MinimumBoundingBox">
            <summary>
            Return minimum bounding box.
            </summary>
        </member>
        <member name="M:GeometRi.Ellipsoid.BoundingBox(GeometRi.Coord3d)">
            <summary>
            Return Axis Aligned Bounding Box (AABB) in given coordinate system.
            </summary>
        </member>
        <member name="P:GeometRi.Ellipsoid.BoundingSphere">
            <summary>
            Return bounding sphere.
            </summary>
        </member>
        <member name="M:GeometRi.Ellipsoid.ProjectionTo(GeometRi.Line3d)">
            <summary>
            Orthogonal projection of ellipsoid to line.
            </summary>
        </member>
        <member name="M:GeometRi.Ellipsoid.IntersectionWith(GeometRi.Line3d)">
            <summary>
            Intersection of ellipsoid with line.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Ellipsoid.IntersectionWith(GeometRi.Segment3d)">
            <summary>
            Intersection of ellipsoid with segment.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Ellipsoid.IntersectionWith(GeometRi.Ray3d)">
            <summary>
            Intersection of ellipsoid with ray.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Ellipsoid.IntersectionWith(GeometRi.Plane3d)">
            <summary>
            Intersection of ellipsoid with plane.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Ellipse'.
            </summary>
        </member>
        <member name="M:GeometRi.Ellipsoid.ClosestPoint(GeometRi.Point3d)">
            <summary>
            Calculates the point on the ellipsoid's boundary closest to given point.
            </summary>
        </member>
        <member name="M:GeometRi.Ellipsoid.Translate(GeometRi.Vector3d)">
            <summary>
            Translate ellipsoid by a vector
            </summary>
        </member>
        <member name="M:GeometRi.Ellipsoid.Rotate(GeometRi.Matrix3d)">
            <summary>
            Rotate ellipsoid by a given rotation matrix
            </summary>
        </member>
        <member name="M:GeometRi.Ellipsoid.Rotate(GeometRi.Matrix3d,GeometRi.Point3d)">
            <summary>
            Rotate ellipsoid by a given rotation matrix around point 'p' as a rotation center
            </summary>
        </member>
        <member name="M:GeometRi.Ellipsoid.Rotate(GeometRi.Rotation,GeometRi.Point3d)">
            <summary>
            Rotate ellipsoid around point 'p' as a rotation center
            </summary>
        </member>
        <member name="M:GeometRi.Ellipsoid.ReflectIn(GeometRi.Point3d)">
            <summary>
            Reflect ellipsoid in given point
            </summary>
        </member>
        <member name="M:GeometRi.Ellipsoid.ReflectIn(GeometRi.Line3d)">
            <summary>
            Reflect ellipsoid in given line
            </summary>
        </member>
        <member name="M:GeometRi.Ellipsoid.ReflectIn(GeometRi.Plane3d)">
            <summary>
            Reflect ellipsoid in given plane
            </summary>
        </member>
        <member name="M:GeometRi.Ellipsoid.Equals(System.Object)">
            <summary>
            Determines whether two objects are equal.
            </summary>
        </member>
        <member name="M:GeometRi.Ellipsoid.GetHashCode">
            <summary>
            Returns the hashcode for the object.
            </summary>
        </member>
        <member name="M:GeometRi.Ellipsoid.ToString">
            <summary>
            String representation of an object in global coordinate system.
            </summary>
        </member>
        <member name="M:GeometRi.Ellipsoid.ToString(GeometRi.Coord3d)">
            <summary>
            String representation of an object in reference coordinate system.
            </summary>
        </member>
        <member name="T:GeometRi.GeometRi3D">
            <summary>
            Static class. Implements global tolerance property and tolerance based equality methods.
            </summary>
        </member>
        <member name="P:GeometRi.GeometRi3D.Tolerance">
            <summary>
            Tolerance used for comparison operations (default 1e-12)
            </summary>
        </member>
        <member name="P:GeometRi.GeometRi3D.DefaultTolerance">
            <summary>
            Default tolerance used for comparison operations
            </summary>
        </member>
        <member name="P:GeometRi.GeometRi3D.UseAbsoluteTolerance">
            <summary>
            Flag for switching absolute (TRUE) to relative (FALSE) tolerance comparison.
            </summary>
        </member>
        <member name="M:GeometRi.GeometRi3D.AlmostEqual(System.Double,System.Double)">
            <summary>
            Tolerance based equality check
            </summary>
        </member>
        <member name="M:GeometRi.GeometRi3D.AlmostEqual(System.Double,System.Double,System.Double)">
            <summary>
            Tolerance based equality check
            </summary>
        </member>
        <member name="M:GeometRi.GeometRi3D.NotEqual(System.Double,System.Double)">
            <summary>
            Tolerance based unequality check
            </summary>
        </member>
        <member name="M:GeometRi.GeometRi3D.NotEqual(System.Double,System.Double,System.Double)">
            <summary>
            Tolerance based unequality check
            </summary>
        </member>
        <member name="M:GeometRi.GeometRi3D.Greater(System.Double,System.Double)">
            <summary>
            Tolerance based comparison
            </summary>
        </member>
        <member name="M:GeometRi.GeometRi3D.Greater(System.Double,System.Double,System.Double)">
            <summary>
            Tolerance based comparison
            </summary>
        </member>
        <member name="M:GeometRi.GeometRi3D.Smaller(System.Double,System.Double)">
            <summary>
            Tolerance based comparison
            </summary>
        </member>
        <member name="M:GeometRi.GeometRi3D.Smaller(System.Double,System.Double,System.Double)">
            <summary>
            Tolerance based comparison
            </summary>
        </member>
        <member name="M:GeometRi.GeometRi3D.Clamp``1(``0,``0,``0)">
            <summary>
            Restrict 'value' to a range [min, max].
            </summary>
        </member>
        <member name="T:GeometRi.ILinearObject">
            <summary>
            Interface for 1D objects (vector, line, ray, segment)
            </summary>
        </member>
        <member name="T:GeometRi.IPlanarObject">
            <summary>
            Interface for 2D objects (plane, circle, ellipse, triangle)
            </summary>
        </member>
        <member name="T:GeometRi.IFiniteObject">
            <summary>
            Interface for finite objects
            </summary>
        </member>
        <member name="T:GeometRi.Line3d">
            <summary>
            Infinite line  in 3D space and defined by any point lying on the line and a direction vector.
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.#ctor">
            <summary>
            Default constructor, initializes line aligned with X-axis in global coordinate system.
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.#ctor(GeometRi.Point3d,GeometRi.Vector3d)">
            <summary>
            Initializes line using point and direction.
            </summary>
            <param name="p">Point on the line.</param>
            <param name="v">Direction vector.</param>
        </member>
        <member name="M:GeometRi.Line3d.#ctor(GeometRi.Point3d,GeometRi.Point3d)">
            <summary>
            Initializes line using two points.
            </summary>
            <param name="p1">First point.</param>
            <param name="p2">Second point.</param>
        </member>
        <member name="M:GeometRi.Line3d.Copy">
            <summary>
            Creates copy of the object
            </summary>
        </member>
        <member name="P:GeometRi.Line3d.Point">
            <summary>
            Base point of the line
            </summary>
        </member>
        <member name="P:GeometRi.Line3d.Direction">
            <summary>
            Direction vector of the line
            </summary>
        </member>
        <member name="P:GeometRi.Line3d.ToLine">
            <summary>
            Returns copy the object
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.IsParallelTo(GeometRi.ILinearObject)">
            <summary>
            Check if two objects are parallel
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.IsNotParallelTo(GeometRi.ILinearObject)">
            <summary>
            Check if two objects are NOT parallel
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.IsOrthogonalTo(GeometRi.ILinearObject)">
            <summary>
            Check if two objects are orthogonal
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.IsParallelTo(GeometRi.IPlanarObject)">
            <summary>
            Check if two objects are parallel
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.IsNotParallelTo(GeometRi.IPlanarObject)">
            <summary>
            Check if two objects are NOT parallel
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.IsOrthogonalTo(GeometRi.IPlanarObject)">
            <summary>
            Check if two objects are orthogonal
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.IsCoplanarTo(GeometRi.IPlanarObject)">
            <summary>
            Check if two objects are coplanar
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.IsCoplanarTo(GeometRi.ILinearObject)">
            <summary>
            Check if two objects are coplanar
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.DistanceTo(GeometRi.Point3d)">
            <summary>
            Shortest distance between line and point
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.DistanceTo(GeometRi.Ray3d)">
            <summary>
            Shortest distance between line and ray
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.DistanceTo(GeometRi.Segment3d)">
            <summary>
            Shortest distance between line and segment
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.DistanceTo(GeometRi.Line3d)">
            <summary>
            Shortest distance between two lines
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.DistanceTo(GeometRi.Circle3d)">
            <summary>
            Shortest distance between line and circle (including interior points)
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.DistanceTo(GeometRi.Circle3d,GeometRi.Point3d@,GeometRi.Point3d@)">
            <summary>
            Shortest distance between line and circle (including interior points)
            </summary>
            <param name="c">Target circle</param>
            <param name="point_on_line">Closest point on line</param>
            <param name="point_on_circle">Closest point on circle</param>
        </member>
        <member name="M:GeometRi.Line3d.PerpendicularTo(GeometRi.Line3d)">
            <summary>
            Point on the perpendicular to the second line (null for parallel lines)
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.IntersectionWith(GeometRi.Line3d)">
            <summary>
            Get intersection of line with other line.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Line3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.IntersectionWith(GeometRi.Plane3d)">
            <summary>
            Get intersection of line with plane.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Line3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.IntersectionWith(GeometRi.Sphere)">
            <summary>
            Get intersection of line with sphere.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.IntersectionWith(GeometRi.Ellipsoid)">
            <summary>
            Get intersection of line with ellipsoid.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.IntersectionWith(GeometRi.Ellipse)">
            <summary>
            Get intersection of line with ellipse.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.IntersectionWith(GeometRi.Circle3d)">
            <summary>
            Get intersection of line with circle.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.IntersectionWith(GeometRi.Segment3d)">
            <summary>
            Get intersection of line with segment.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.IntersectionWith(GeometRi.Triangle)">
            <summary>
            Get intersection of line with triangle.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.IntersectionWith(GeometRi.Box3d)">
            <summary>
            Get intersection of line with box.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.ProjectionTo(GeometRi.Plane3d)">
            <summary>
            Get the orthogonal projection of a line to the plane.
            Return object of type 'Line3d' or 'Point3d'
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.AngleTo(GeometRi.ILinearObject)">
            <summary>
            Angle between two objects in radians (0 &lt; angle &lt; Pi)
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.AngleToDeg(GeometRi.ILinearObject)">
            <summary>
            Angle between two objects in degrees (0 &lt; angle &lt; 180)
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.AngleTo(GeometRi.IPlanarObject)">
            <summary>
            Angle between two objects in radians (0 &lt; angle &lt; Pi)
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.AngleToDeg(GeometRi.IPlanarObject)">
            <summary>
            Angle between two objects in degrees (0 &lt; angle &lt; 180)
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.Translate(GeometRi.Vector3d)">
            <summary>
            Translate line by a vector
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.Rotate(GeometRi.Matrix3d)">
            <summary>
            Rotate line by a given rotation matrix
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.Rotate(GeometRi.Matrix3d,GeometRi.Point3d)">
            <summary>
            Rotate line by a given rotation matrix around point 'p' as a rotation center
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.Rotate(GeometRi.Rotation,GeometRi.Point3d)">
            <summary>
            Rotate line around point 'p' as a rotation center.
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.ReflectIn(GeometRi.Point3d)">
            <summary>
            Reflect line in given point
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.ReflectIn(GeometRi.Line3d)">
            <summary>
            Reflect line in given line
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.ReflectIn(GeometRi.Plane3d)">
            <summary>
            Reflect line in given plane
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.Equals(System.Object)">
            <summary>
            Determines whether two objects are equal.
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.GetHashCode">
            <summary>
            Returns the hashcode for the object.
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.ToString">
            <summary>
            String representation of an object in global coordinate system.
            </summary>
        </member>
        <member name="M:GeometRi.Line3d.ToString(GeometRi.Coord3d)">
            <summary>
            String representation of an object in reference coordinate system.
            </summary>
        </member>
        <member name="T:GeometRi.Matrix3d">
            <summary>
            General 3x3 matrix class.
            </summary>
        </member>
        <member name="M:GeometRi.Matrix3d.#ctor">
            <summary>
            Default constructor, intializes zero matrix.
            </summary>
        </member>
        <member name="M:GeometRi.Matrix3d.Copy">
            <summary>
            Creates copy of the object
            </summary>
        </member>
        <member name="P:GeometRi.Matrix3d.Det">
            <summary>
            Determinant of the matrix
            </summary>
        </member>
        <member name="P:GeometRi.Matrix3d.Trace">
            <summary>
            Trace of the matrix
            </summary>
        </member>
        <member name="P:GeometRi.Matrix3d.MaxNorm">
            <summary>
            Elementwise max norm of the matrix
            </summary>
        </member>
        <member name="M:GeometRi.Matrix3d.RotationMatrix(GeometRi.Vector3d,System.Double)">
            <summary>
            Defines counterclockwise rotation around axis
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="alpha">Angle of rotation (radians)</param>
        </member>
        <member name="M:GeometRi.Matrix3d.Equals(System.Object)">
            <summary>
            Determines whether two objects are equal.
            </summary>
        </member>
        <member name="M:GeometRi.Matrix3d.GetHashCode">
            <summary>
            Returns the hashcode for the object.
            </summary>
        </member>
        <member name="M:GeometRi.Matrix3d.ToString">
            <summary>
            String representation of an object.
            </summary>
        </member>
        <member name="T:GeometRi.Plane3d">
            <summary>
            3D plane defined by point and a normal vector.
            </summary>
        </member>
        <member name="M:GeometRi.Plane3d.#ctor">
            <summary>
            Default constructor, initializes XY plane in global cordinate system.
            </summary>
        </member>
        <member name="M:GeometRi.Plane3d.#ctor(System.Double,System.Double,System.Double,System.Double,GeometRi.Coord3d)">
            <summary>
            Initializes plane using general equation in 3D space: A*x+B*y+C*z+D=0.
            </summary>
            <param name="a">Parameter "A" in general plane equation.</param>
            <param name="b">Parameter "B" in general plane equation.</param>
            <param name="c">Parameter "C" in general plane equation.</param>
            <param name="d">Parameter "D" in general plane equation.</param>
            <param name="coord">Coordinate system in which plane equation is defined (default: Coord3d.GlobalCS).</param>
        </member>
        <member name="M:GeometRi.Plane3d.#ctor(GeometRi.Point3d,GeometRi.Point3d,GeometRi.Point3d)">
            <summary>
            Initializes plane using three points.
            </summary>
            <param name="p1">First point.</param>
            <param name="p2">Second point.</param>
            <param name="p3">Third point.</param>
        </member>
        <member name="M:GeometRi.Plane3d.#ctor(GeometRi.Point3d,GeometRi.Vector3d,GeometRi.Vector3d)">
            <summary>
            Initializes plane using point and two vectors lying in the plane.
            </summary>
        </member>
        <member name="M:GeometRi.Plane3d.#ctor(GeometRi.Point3d,GeometRi.Vector3d)">
            <summary>
            Initializes plane using point and normal vector.
            </summary>
            <param name="p1"></param>
            <param name="v1"></param>
        </member>
        <member name="M:GeometRi.Plane3d.Copy">
            <summary>
            Creates copy of the object
            </summary>
        </member>
        <member name="P:GeometRi.Plane3d.Point">
            <summary>
            Point on the plane
            </summary>
            <returns></returns>
        </member>
        <member name="P:GeometRi.Plane3d.Normal">
            <summary>
            Normal vector of the plane
            </summary>
            <returns></returns>
        </member>
        <member name="M:GeometRi.Plane3d.SetCoord(GeometRi.Coord3d)">
            <summary>
            Set reference coordinate system for general plane equation
            </summary>
        </member>
        <member name="P:GeometRi.Plane3d.A">
            <summary>
            Coefficient A in the general plane equation
            </summary>
        </member>
        <member name="P:GeometRi.Plane3d.B">
            <summary>
            Coefficient B in the general plane equation
            </summary>
        </member>
        <member name="P:GeometRi.Plane3d.C">
            <summary>
            Coefficient C in the general plane equation
            </summary>
        </member>
        <member name="P:GeometRi.Plane3d.D">
            <summary>
            Coefficient D in the general plane equation
            </summary>
        </member>
        <member name="P:GeometRi.Plane3d.ToPlane">
            <summary>
            Returns copy of the object
            </summary>
        </member>
        <member name="M:GeometRi.Plane3d.IsParallelTo(GeometRi.ILinearObject)">
            <summary>
            Check if two objects are parallel
            </summary>
        </member>
        <member name="M:GeometRi.Plane3d.IsNotParallelTo(GeometRi.ILinearObject)">
            <summary>
            Check if two objects are NOT parallel
            </summary>
        </member>
        <member name="M:GeometRi.Plane3d.IsOrthogonalTo(GeometRi.ILinearObject)">
            <summary>
            Check if two objects are orthogonal
            </summary>
        </member>
        <member name="M:GeometRi.Plane3d.IsParallelTo(GeometRi.IPlanarObject)">
            <summary>
            Check if two objects are parallel
            </summary>
        </member>
        <member name="M:GeometRi.Plane3d.IsNotParallelTo(GeometRi.IPlanarObject)">
            <summary>
            Check if two objects are NOT parallel
            </summary>
        </member>
        <member name="M:GeometRi.Plane3d.IsOrthogonalTo(GeometRi.IPlanarObject)">
            <summary>
            Check if two objects are orthogonal
            </summary>
        </member>
        <member name="M:GeometRi.Plane3d.IsCoplanarTo(GeometRi.IPlanarObject)">
            <summary>
            Check if two objects are coplanar
            </summary>
        </member>
        <member name="M:GeometRi.Plane3d.IsCoplanarTo(GeometRi.ILinearObject)">
            <summary>
            Check if two objects are coplanar
            </summary>
        </member>
        <member name="M:GeometRi.Plane3d.DistanceTo(GeometRi.Circle3d)">
            <summary>
            Distance from plane to circle
            </summary>
        </member>
        <member name="M:GeometRi.Plane3d.DistanceTo(GeometRi.Circle3d,GeometRi.Point3d@,GeometRi.Point3d@)">
            <summary>
            Shortest distance between plane and circle (including interior points)
            </summary>
            <param name="c">Target circle</param>
            <param name="point_on_plane">Closest point on plane</param>
            <param name="point_on_circle">Closest point on circle</param>
        </member>
        <member name="M:GeometRi.Plane3d.IntersectionWith(GeometRi.Line3d)">
            <summary>
            Get intersection of line with plane.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Line3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Plane3d.IntersectionWith(GeometRi.Plane3d,GeometRi.Plane3d)">
            <summary>
            Finds the common intersection of three planes.
            Return 'null' (no common intersection) or object of type 'Point3d', 'Line3d' or 'Plane3d'
            </summary>
        </member>
        <member name="M:GeometRi.Plane3d.IntersectionWith(GeometRi.Plane3d)">
            <summary>
            Get intersection of two planes.
            Returns 'null' (no intersection) or object of type 'Line3d' or 'Plane3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Plane3d.IntersectionWith(GeometRi.Sphere)">
            <summary>
            Get intersection of plane with sphere.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Circle3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Plane3d.IntersectionWith(GeometRi.Ellipsoid)">
            <summary>
            Get intersection of plane with ellispoid.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Ellipse'.
            </summary>
        </member>
        <member name="M:GeometRi.Plane3d.IntersectionWith(GeometRi.Circle3d)">
            <summary>
            Intersection of circle with plane.
            Returns 'null' (no intersection) or object of type 'Circle3d', 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Plane3d.IntersectionWith(GeometRi.Triangle)">
            <summary>
            Intersection of triangle with plane.
            Returns 'null' (no intersection) or object of type 'Triangle', 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Plane3d.AngleTo(GeometRi.ILinearObject)">
            <summary>
            Angle between two objects in radians (0 &lt; angle &lt; Pi)
            </summary>
        </member>
        <member name="M:GeometRi.Plane3d.AngleToDeg(GeometRi.ILinearObject)">
            <summary>
            Angle between two objects in degrees (0 &lt; angle &lt; 180)
            </summary>
        </member>
        <member name="M:GeometRi.Plane3d.AngleTo(GeometRi.IPlanarObject)">
            <summary>
            Angle between two objects in radians (0 &lt; angle &lt; Pi)
            </summary>
        </member>
        <member name="M:GeometRi.Plane3d.AngleToDeg(GeometRi.IPlanarObject)">
            <summary>
            Angle between two objects in degrees (0 &lt; angle &lt; 180)
            </summary>
        </member>
        <member name="M:GeometRi.Plane3d.Translate(GeometRi.Vector3d)">
            <summary>
            Translate plane by a vector
            </summary>
        </member>
        <member name="M:GeometRi.Plane3d.Rotate(GeometRi.Matrix3d)">
            <summary>
            Rotate plane by a given rotation matrix
            </summary>
        </member>
        <member name="M:GeometRi.Plane3d.Rotate(GeometRi.Matrix3d,GeometRi.Point3d)">
            <summary>
            Rotate plane by a given rotation matrix around point 'p' as a rotation center
            </summary>
        </member>
        <member name="M:GeometRi.Plane3d.Rotate(GeometRi.Rotation,GeometRi.Point3d)">
            <summary>
            Rotate plane around point 'p' as a rotation center
            </summary>
        </member>
        <member name="M:GeometRi.Plane3d.ReflectIn(GeometRi.Point3d)">
            <summary>
            Reflect plane in given point
            </summary>
        </member>
        <member name="M:GeometRi.Plane3d.ReflectIn(GeometRi.Line3d)">
            <summary>
            Reflect plane in given line
            </summary>
        </member>
        <member name="M:GeometRi.Plane3d.ReflectIn(GeometRi.Plane3d)">
            <summary>
            Reflect plane in given plane
            </summary>
        </member>
        <member name="M:GeometRi.Plane3d.Equals(System.Object)">
            <summary>
            Determines whether two objects are equal.
            </summary>
        </member>
        <member name="M:GeometRi.Plane3d.GetHashCode">
            <summary>
            Returns the hashcode for the object.
            </summary>
        </member>
        <member name="M:GeometRi.Plane3d.ToString">
            <summary>
            String representation of an object in global coordinate system.
            </summary>
        </member>
        <member name="M:GeometRi.Plane3d.ToString(GeometRi.Coord3d)">
            <summary>
            String representation of an object in reference coordinate system.
            </summary>
        </member>
        <member name="T:GeometRi.Point3d">
            <summary>
            Point in 3D space defined in global or local reference frame.
            </summary>
        </member>
        <member name="M:GeometRi.Point3d.#ctor(GeometRi.Coord3d)">
            <summary>
            Default constructor, initializes zero point.
            </summary>
            <param name="coord">Reference coordinate system (default - Coord3d.GlobalCS).</param>
        </member>
        <member name="M:GeometRi.Point3d.#ctor(System.Double,System.Double,System.Double,GeometRi.Coord3d)">
            <summary>
            Initiaizes point object using coordinates.
            </summary>
            <param name="coord">Reference coordinate system (default - Coord3d.GlobalCS).</param>
        </member>
        <member name="M:GeometRi.Point3d.#ctor(System.Double[],GeometRi.Coord3d)">
            <summary>
            Initiaizes point object using double array.
            </summary>
            <param name="coord">Reference coordinate system (default - Coord3d.GlobalCS).</param>
        </member>
        <member name="M:GeometRi.Point3d.Copy">
            <summary>
            Creates copy of the object
            </summary>
        </member>
        <member name="P:GeometRi.Point3d.X">
            <summary>
            X coordinate in reference coordinate system
            </summary>
        </member>
        <member name="P:GeometRi.Point3d.Y">
            <summary>
            Y coordinate in reference coordinate system
            </summary>
        </member>
        <member name="P:GeometRi.Point3d.Z">
            <summary>
            Z coordinate in reference coordinate system
            </summary>
        </member>
        <member name="P:GeometRi.Point3d.Coord">
            <summary>
             Reference coordinate system
            </summary>
        </member>
        <member name="P:GeometRi.Point3d.ToVector">
            <summary>
            Radius vector of point (in global coordinate system)
            </summary>
        </member>
        <member name="M:GeometRi.Point3d.ConvertTo(GeometRi.Coord3d)">
            <summary>
            Convert point to reference coordinate system
            </summary>
        </member>
        <member name="M:GeometRi.Point3d.ConvertToGlobal">
            <summary>
            Convert point to global coordinate system
            </summary>
            <returns></returns>
        </member>
        <member name="M:GeometRi.Point3d.DistanceTo(GeometRi.Point3d)">
            <summary>
            Returns distance between two points
            </summary>
        </member>
        <member name="M:GeometRi.Point3d.DistanceSquared(GeometRi.Point3d)">
            <summary>
            Returns squared distance between two points
            </summary>
        </member>
        <member name="M:GeometRi.Point3d.DistanceTo(GeometRi.Line3d)">
            <summary>
            Returns shortest distance to the line
            </summary>
            <param name="l"></param>
            <returns></returns>
        </member>
        <member name="M:GeometRi.Point3d.DistanceTo(GeometRi.Plane3d)">
            <summary>
            Returns shortest distance from point to the plane
            </summary>
        </member>
        <member name="M:GeometRi.Point3d.DistanceTo(GeometRi.Ray3d)">
            <summary>
            Returns shortest distance from point to the ray
            </summary>
        </member>
        <member name="M:GeometRi.Point3d.DistanceTo(GeometRi.Segment3d)">
            <summary>
            Returns shortest distance from point to the segment
            </summary>
        </member>
        <member name="M:GeometRi.Point3d.DistanceTo(GeometRi.Sphere)">
            <summary>
            Shortest distance between point and sphere (including interior points).
            </summary>
        </member>
        <member name="M:GeometRi.Point3d.DistanceTo(GeometRi.Circle3d)">
            <summary>
            Shortest distance from point to circle (including interior points)
            </summary>
        </member>
        <member name="M:GeometRi.Point3d.DistanceTo(GeometRi.Box3d)">
            <summary>
            Distance from box to point (zero will be returned for point located inside box)
            </summary>
        </member>
        <member name="M:GeometRi.Point3d.DistanceTo(GeometRi.Triangle)">
            <summary>
            Shortest distance from point to triangle (including interior points)
            </summary>
        </member>
        <member name="M:GeometRi.Point3d.ClosestPoint(GeometRi.Circle3d)">
            <summary>
            Closest point on circle (including interior points).
            </summary>
        </member>
        <member name="M:GeometRi.Point3d.ClosestPoint(GeometRi.Box3d)">
            <summary>
            Closest point on box (including interior points).
            </summary>
        </member>
        <member name="M:GeometRi.Point3d.ClosestPoint(GeometRi.Triangle)">
            <summary>
            Closest point on triangle.
            </summary>
        </member>
        <member name="M:GeometRi.Point3d.ClosestPoint(GeometRi.Sphere)">
            <summary>
            Point on sphere's surface closest to target point "p".
            </summary>
        </member>
        <member name="M:GeometRi.Point3d.ProjectionTo(GeometRi.Plane3d)">
            <summary>
            Returns orthogonal projection of the point to the plane
            </summary>
        </member>
        <member name="M:GeometRi.Point3d.ProjectionTo(GeometRi.Line3d)">
            <summary>
            Returns orthogonal projection of the point to the line
            </summary>
        </member>
        <member name="M:GeometRi.Point3d.ProjectionTo(GeometRi.Sphere)">
            <summary>
            Returns orthogonal projection of the point to the surface of the sphere
            </summary>
        </member>
        <member name="M:GeometRi.Point3d.BelongsTo(GeometRi.Line3d)">
            <summary>
            <para>Test if point is located in the epsilon neighborhood of the line.</para>
            <para>Epsilon neighborhood is defined by a GeometRi3D.Tolerance property.</para>
            </summary>
        </member>
        <member name="M:GeometRi.Point3d.BelongsTo(GeometRi.Ray3d)">
            <summary>
            <para>Test if point is located in the epsilon neighborhood of the ray.</para>
            <para>Epsilon neighborhood is defined by a GeometRi3D.Tolerance property.</para>
            </summary>
        </member>
        <member name="M:GeometRi.Point3d.BelongsTo(GeometRi.Plane3d)">
            <summary>
            <para>Test if point is located in the epsilon neighborhood of the plane.</para>
            <para>Epsilon neighborhood is defined by a GeometRi3D.Tolerance property.</para>
            </summary>
        </member>
        <member name="M:GeometRi.Point3d.BelongsTo(GeometRi.FiniteObject)">
            <summary>
            <para>Test if point is located in the epsilon neighborhood of the object.</para>
            <para>Epsilon neighborhood is defined by a GeometRi3D.Tolerance property.</para>
            <para>For relative tolerance tests a fraction of the typical object's dimension is used to define epsilon neighborhood.</para>
            </summary>
        </member>
        <member name="M:GeometRi.Point3d.IsInside(GeometRi.FiniteObject)">
            <summary>
            <para>Test if point is located strictly inside (not in the epsilon neighborhood of the boundary) of the object.</para>
            <para>Epsilon neighborhood is defined by a GeometRi3D.Tolerance property.</para>
            <para>For relative tolerance tests a fraction of the typical object's dimension is used to define epsilon neighborhood.</para>
            </summary>
        </member>
        <member name="M:GeometRi.Point3d.IsOutside(GeometRi.FiniteObject)">
            <summary>
            <para>Test if point is located outside of the epsilon neighborhood of the object.</para>
            <para>Epsilon neighborhood is defined by a GeometRi3D.Tolerance property.</para>
            <para>For relative tolerance tests a fraction of the typical object's dimension is used to define epsilon neighborhood.</para>
            </summary>        
        </member>
        <member name="M:GeometRi.Point3d.IsOnBoundary(GeometRi.FiniteObject)">
            <summary>
            <para>Test if point is located in the epsilon neighborhood of the object's boundary.</para>
            <para>Epsilon neighborhood is defined by a GeometRi3D.Tolerance property.</para>
            <para>For relative tolerance tests a fraction of the typical object's dimension is used to define epsilon neighborhood.</para>
            </summary>
        </member>
        <member name="M:GeometRi.Point3d.Translate(GeometRi.Vector3d)">
            <summary>
            Translate point by a vector
            </summary>
        </member>
        <member name="M:GeometRi.Point3d.Rotate(GeometRi.Matrix3d)">
            <summary>
            Rotate point by a given rotation matrix
            </summary>
        </member>
        <member name="M:GeometRi.Point3d.Rotate(GeometRi.Matrix3d,GeometRi.Point3d)">
            <summary>
            Rotate point by a given rotation matrix around point 'p' as a rotation center
            </summary>
        </member>
        <member name="M:GeometRi.Point3d.Rotate(GeometRi.Rotation)">
            <summary>
            Rotate object around origin in object's reference coordinate system.
            </summary>
        </member>
        <member name="M:GeometRi.Point3d.Rotate(GeometRi.Rotation,GeometRi.Point3d)">
            <summary>
            Rotate point around point 'p' as a rotation center.
            </summary>
        </member>
        <member name="M:GeometRi.Point3d.ReflectIn(GeometRi.Point3d)">
            <summary>
            Reflect point in given point
            </summary>
        </member>
        <member name="M:GeometRi.Point3d.ReflectIn(GeometRi.Line3d)">
            <summary>
            Reflect point in given line
            </summary>
        </member>
        <member name="M:GeometRi.Point3d.ReflectIn(GeometRi.Plane3d)">
            <summary>
            Reflect point in given plane
            </summary>
        </member>
        <member name="M:GeometRi.Point3d.CollinearPoints(GeometRi.Point3d,GeometRi.Point3d,GeometRi.Point3d)">
            <summary>
            Check if three points are collinear
            </summary>
        </member>
        <member name="M:GeometRi.Point3d.Equals(System.Object)">
            <summary>
            Determines whether two objects are equal.
            </summary>
        </member>
        <member name="M:GeometRi.Point3d.GetHashCode">
            <summary>
            Returns the hashcode for the object.
            </summary>
        </member>
        <member name="M:GeometRi.Point3d.ToString">
            <summary>
            String representation of an object in global coordinate system.
            </summary>
        </member>
        <member name="M:GeometRi.Point3d.ToString(GeometRi.Coord3d)">
            <summary>
            String representation of an object in reference coordinate system.
            </summary>
        </member>
        <member name="T:GeometRi.Quaternion">
            <summary>
            Unit quaternion (W + X*i + Y*j + Z*k).
            </summary>
        </member>
        <member name="M:GeometRi.Quaternion.#ctor(GeometRi.Coord3d)">
            <summary>
            Default constructor, initializes quaternion with zero rotation (1,0,0,0).
            </summary>
            <param name="coord">Reference coordinate system (default - Coord3d.GlobalCS).</param>
        </member>
        <member name="M:GeometRi.Quaternion.#ctor(System.Double,System.Double,System.Double,System.Double,GeometRi.Coord3d)">
            <summary>
            Initializes quaternion.
            </summary>
            <param name="coord">Reference coordinate system (default - Coord3d.GlobalCS).</param>
        </member>
        <member name="M:GeometRi.Quaternion.#ctor(System.Double[],GeometRi.Coord3d)">
            <summary>
            Initializes quaternion using double array.
            </summary>
            <param name="coord">Reference coordinate system (default - Coord3d.GlobalCS).</param>
        </member>
        <member name="M:GeometRi.Quaternion.#ctor(GeometRi.Vector3d,System.Double)">
            <summary>
            Initializes quaternion using axis of rotation and angle.
            </summary>
        </member>
        <member name="M:GeometRi.Quaternion.#ctor(GeometRi.Matrix3d,GeometRi.Coord3d)">
            <summary>
            Initializes quaternion using rotation matrix.
            </summary>
            <param name="m">Rotation matrix.</param>
            <param name="coord">Reference coordinate system (default - Coord3d.GlobalCS).</param>
        </member>
        <member name="M:GeometRi.Quaternion.Copy">
            <summary>
            Creates copy of the object
            </summary>
        </member>
        <member name="P:GeometRi.Quaternion.X">
            <summary>
            X component in reference coordinate system
            </summary>
        </member>
        <member name="P:GeometRi.Quaternion.Y">
            <summary>
            Y component in reference coordinate system
            </summary>
        </member>
        <member name="P:GeometRi.Quaternion.Z">
            <summary>
            Z component in reference coordinate system
            </summary>
        </member>
        <member name="P:GeometRi.Quaternion.W">
            <summary>
            W component in reference coordinate system
            </summary>
        </member>
        <member name="P:GeometRi.Quaternion.Coord">
            <summary>
             Reference coordinate system
            </summary>
        </member>
        <member name="P:GeometRi.Quaternion.Norm">
            <summary>
            Norm of a quaternion
            </summary>
        </member>
        <member name="P:GeometRi.Quaternion.SquareNorm">
            <summary>
            Square of the norm of a quaternion
            </summary>
        </member>
        <member name="P:GeometRi.Quaternion.Conjugate">
            <summary>
            Conjugate of a quaternion
            </summary>
        </member>
        <member name="P:GeometRi.Quaternion.ToAxis">
            <summary>
            Get axis of rotation in reference coordinate system.
            </summary>
        </member>
        <member name="P:GeometRi.Quaternion.ToAngle">
            <summary>
            Get rotation angle in reference coordinate system.
            </summary>
        </member>
        <member name="P:GeometRi.Quaternion.Normalized">
            <summary>
            Return normalized quaternion
            </summary>
        </member>
        <member name="M:GeometRi.Quaternion.Normalize">
            <summary>
            Normalize the current quaternion
            </summary>
        </member>
        <member name="M:GeometRi.Quaternion.ConvertToGlobal">
            <summary>
            Convert quaternion to global coordinate system.
            </summary>
        </member>
        <member name="M:GeometRi.Quaternion.ConvertTo(GeometRi.Coord3d)">
            <summary>
            Convert quaternion to reference coordinate system.
            </summary>
        </member>
        <member name="M:GeometRi.Quaternion.ToRotationMatrix">
            <summary>
            Returns rotation matrix (in current reference coordinate system).
            </summary>
        </member>
        <member name="M:GeometRi.Quaternion.SLERP(GeometRi.Quaternion,GeometRi.Quaternion,System.Double)">
            <summary>
            Spherical linear interpolation of two rotations.
            </summary>
            <param name="q1">Initial rotation</param>
            <param name="q2">Final rotation</param>
            <param name="t">Interpolation parameter within range [0, 1]</param>
        </member>
        <member name="M:GeometRi.Quaternion.Equals(System.Object)">
            <summary>
            Determines whether two objects are equal.
            </summary>
        </member>
        <member name="M:GeometRi.Quaternion.GetHashCode">
            <summary>
            Returns the hashcode for the object.
            </summary>
        </member>
        <member name="M:GeometRi.Quaternion.ToString">
            <summary>
            String representation of an object in global coordinate system.
            </summary>
        </member>
        <member name="M:GeometRi.Quaternion.ToString(GeometRi.Coord3d)">
            <summary>
            String representation of an object in reference coordinate system.
            </summary>
        </member>
        <member name="T:GeometRi.Ray3d">
            <summary>
            Ray in 3D space defined by point and direction vector.
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.#ctor">
            <summary>
            Default constructor, initializes ray starting from origin and aligned with X-axis (in global coordinate system).
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.#ctor(GeometRi.Point3d,GeometRi.Vector3d)">
            <summary>
            Initializes ray using starting point and direction.
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.Copy">
            <summary>
            Creates copy of the object
            </summary>
        </member>
        <member name="P:GeometRi.Ray3d.Point">
            <summary>
            Base point of the ray
            </summary>
            <returns></returns>
        </member>
        <member name="P:GeometRi.Ray3d.Direction">
            <summary>
            Direction vector of the ray
            </summary>
            <returns></returns>
        </member>
        <member name="M:GeometRi.Ray3d.IsParallelTo(GeometRi.ILinearObject)">
            <summary>
            Check if two objects are parallel
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.IsNotParallelTo(GeometRi.ILinearObject)">
            <summary>
            Check if two objects are NOT parallel
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.IsOrthogonalTo(GeometRi.ILinearObject)">
            <summary>
            Check if two objects are orthogonal
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.IsParallelTo(GeometRi.IPlanarObject)">
            <summary>
            Check if two objects are parallel
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.IsNotParallelTo(GeometRi.IPlanarObject)">
            <summary>
            Check if two objects are NOT parallel
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.IsOrthogonalTo(GeometRi.IPlanarObject)">
            <summary>
            Check if two objects are orthogonal
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.IsCoplanarTo(GeometRi.IPlanarObject)">
            <summary>
            Check if two objects are coplanar
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.IsCoplanarTo(GeometRi.ILinearObject)">
            <summary>
            Check if two objects are coplanar
            </summary>
        </member>
        <member name="P:GeometRi.Ray3d.ToLine">
            <summary>
            Convert ray to line
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.DistanceTo(GeometRi.Point3d)">
            <summary>
            Distance from ray to point
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.DistanceTo(GeometRi.Line3d)">
            <summary>
            Shortest distance to a line
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.DistanceTo(GeometRi.Segment3d)">
            <summary>
            Distance to a segment
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.DistanceTo(GeometRi.Ray3d)">
            <summary>
            Distance between two rays
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.DistanceTo(GeometRi.Circle3d)">
            <summary>
            Shortest distance between ray and circle (including interior points)
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.DistanceTo(GeometRi.Circle3d,GeometRi.Point3d@,GeometRi.Point3d@)">
            <summary>
            Shortest distance between ray and circle (including interior points)
            </summary>
            <param name="c">Target circle</param>
            <param name="point_on_ray">Closest point on ray</param>
            <param name="point_on_circle">Closest point on circle</param>
        </member>
        <member name="M:GeometRi.Ray3d.PerpendicularTo(GeometRi.Line3d)">
            <summary>
            Point on the perpendicular to the line
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.IntersectionWith(GeometRi.Plane3d)">
            <summary>
            Get intersection of ray with plane.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Ray3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.IntersectionWith(GeometRi.Line3d)">
            <summary>
            Get intersection of ray with line.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Ray3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.IntersectionWith(GeometRi.Ray3d)">
            <summary>
            Get intersection of ray with other ray.
            Returns 'null' (no intersection) or object of type 'Point3d', 'Segment3d' or 'Ray3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.IntersectionWith(GeometRi.Segment3d)">
            <summary>
            Get intersection of ray with segment.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.IntersectionWith(GeometRi.Sphere)">
            <summary>
            Get intersection of ray with sphere.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.IntersectionWith(GeometRi.Ellipse)">
            <summary>
            Get intersection of ray with ellipse.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.IntersectionWith(GeometRi.Ellipsoid)">
            <summary>
            Get intersection of ray with ellipsoid.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.IntersectionWith(GeometRi.Circle3d)">
            <summary>
            Get intersection of ray with circle.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.IntersectionWith(GeometRi.Triangle)">
            <summary>
            Get intersection of ray with triangle.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.IntersectionWith(GeometRi.Box3d)">
            <summary>
            Get intersection of ray with box.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.ProjectionTo(GeometRi.Plane3d)">
            <summary>
            Get the orthogonal projection of a ray to the plane.
            Return object of type 'Ray3d' or 'Point3d'
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.AngleTo(GeometRi.ILinearObject)">
            <summary>
            Angle between two objects in radians (0 &lt; angle &lt; Pi)
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.AngleToDeg(GeometRi.ILinearObject)">
            <summary>
            Angle between two objects in degrees (0 &lt; angle &lt; 180)
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.AngleTo(GeometRi.IPlanarObject)">
            <summary>
            Angle between two objects in radians (0 &lt; angle &lt; Pi)
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.AngleToDeg(GeometRi.IPlanarObject)">
            <summary>
            Angle between two objects in degrees (0 &lt; angle &lt; 180)
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.Translate(GeometRi.Vector3d)">
            <summary>
            Translate ray by a vector
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.Rotate(GeometRi.Matrix3d)">
            <summary>
            Rotate ray by a given rotation matrix
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.Rotate(GeometRi.Matrix3d,GeometRi.Point3d)">
            <summary>
            Rotate ray by a given rotation matrix around point 'p' as a rotation center
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.Rotate(GeometRi.Rotation,GeometRi.Point3d)">
            <summary>
            Rotate ray around point 'p' as a rotation center
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.ReflectIn(GeometRi.Point3d)">
            <summary>
            Reflect ray in given point
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.ReflectIn(GeometRi.Line3d)">
            <summary>
            Reflect ray in given line
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.ReflectIn(GeometRi.Plane3d)">
            <summary>
            Reflect ray in given plane
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.Equals(System.Object)">
            <summary>
            Determines whether two objects are equal.
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.GetHashCode">
            <summary>
            Returns the hashcode for the object.
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.ToString">
            <summary>
            String representation of an object in global coordinate system.
            </summary>
        </member>
        <member name="M:GeometRi.Ray3d.ToString(GeometRi.Coord3d)">
            <summary>
            String representation of an object in reference coordinate system.
            </summary>
        </member>
        <member name="T:GeometRi.Rotation">
            <summary>
            Rotation in 3D space defined in global or local reference frame (internally represented by rotation matrix).
            </summary>
        </member>
        <member name="M:GeometRi.Rotation.#ctor">
            <summary>
            Default constructor, initializes identity matrix (zero rotation).
            </summary>
        </member>
        <member name="M:GeometRi.Rotation.#ctor(GeometRi.Coord3d)">
            <summary>
            Initializes rotation, equal to the rotation from global CS to 'coord'.
            </summary>
        </member>
        <member name="M:GeometRi.Rotation.#ctor(GeometRi.Matrix3d,GeometRi.Coord3d)">
            <summary>
            Initializes rotation using rotation matrix.
            </summary>
            <param name="m">Rotation matrix.</param>
            <param name="coord">Reference coordinate system (default - Coord3d.GlobalCS).</param>
        </member>
        <member name="M:GeometRi.Rotation.#ctor(GeometRi.Quaternion)">
            <summary>
            Initializes rotation using quaternion.
            </summary>
            <param name="q"></param>
        </member>
        <member name="M:GeometRi.Rotation.#ctor(GeometRi.Vector3d,System.Double)">
            <summary>
            Initializes rotation using axis and angle of rotation.
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="alpha">Angle of rotation (counterclockwise, radians)</param>
        </member>
        <member name="M:GeometRi.Rotation.Random">
            <summary>
            Random rotation
            </summary>
        </member>
        <member name="M:GeometRi.Rotation.Copy">
            <summary>
            Creates copy of the object
            </summary>
        </member>
        <member name="P:GeometRi.Rotation.ToRotationMatrix">
            <summary>
            Returns rotation matrix equivalent to the current rotation.
            </summary>
        </member>
        <member name="P:GeometRi.Rotation.Inverse">
            <summary>
            Returns inverse rotation.
            </summary>
        </member>
        <member name="P:GeometRi.Rotation.ToQuaternion">
            <summary>
            Returns quaternion equivalent to the current rotation.
            </summary>
        </member>
        <member name="P:GeometRi.Rotation.ToAxis">
            <summary>
            Returns axis of the rotation (use 'ToAngle' property to get angle of the rotation).
            </summary>
        </member>
        <member name="P:GeometRi.Rotation.ToAngle">
            <summary>
            Returns angle of the rotation (use 'ToAxis' property to get axis of the rotation).
            </summary>
        </member>
        <member name="P:GeometRi.Rotation.Coord">
            <summary>
             Reference coordinate system
            </summary>
        </member>
        <member name="M:GeometRi.Rotation.FromEulerAngles(System.Double,System.Double,System.Double,System.String,GeometRi.Coord3d)">
            <summary>
            Creates rotation object by composing three elemental rotations, i.e. rotations about the axes of a coordinate system.
            <para>Both proper Euler angles ("xyx", "zxz", etc.) or Tait–Bryan angles ("xyz", "yzx") are allowed.</para>
            Extrinsic rotations (rotations in fixed frame) should be written in lower case ("xyz", zxz", etc.).
            <para>Intrinsic rotations (rotations in moving frame) should be written in upper case ("XYZ", "ZXZ", etc.).</para>
            </summary>
            <param name="alpha">First rotation angle.</param>
            <param name="beta">Second rotation angle.</param>
            <param name="gamma">Third rotation angle.</param>
            <param name="RotationOrder">String, representing rotation axes in the form "xyz" (extrinsic rotations, fixed frame) or "XYZ" (intrinsic rotations, moving frame).</param>
            <param name="coord">Reference coordinate system, default - Coord3d.GlobalCS.</param>
            <returns></returns>
        </member>
        <member name="M:GeometRi.Rotation.ToEulerAngles(System.String,GeometRi.Coord3d)">
            <summary>
            Factor a rotation matrix as product of three elemental rotations, i.e. rotations about the axes of a coordinate system.
            <para>Both proper Euler angles ("xyx", "zxz", etc.) or Tait–Bryan angles ("xyz", "yzx") are allowed.</para>
            Extrinsic rotations (rotations in fixed frame) should be written in lower case ("xyz", zxz", etc.).
            <para>Intrinsic rotations (rotations in moving frame) should be written in upper case ("XYZ", "ZXZ", etc.).</para>
            Note that such factorization generally is not unique!
            </summary>
            <param name="RotationOrder">String, representing rotation axes in the form "xyz" (extrinsic rotations, fixed frame) or "XYZ" (intrinsic rotations, moving frame).</param>
            <param name="coord">Reference coordinate system, default - Coord3d.GlobalCS.</param>
            <returns>Double array with first, second and third rotation angles</returns>
        </member>
        <member name="M:GeometRi.Rotation.SLERP(GeometRi.Rotation,GeometRi.Rotation,System.Double)">
            <summary>
            Spherical linear interpolation of two rotations.
            </summary>
            <param name="r1">Initial rotation</param>
            <param name="r2">Final rotation</param>
            <param name="t">Interpolation parameter within range [0, 1]</param>
        </member>
        <member name="M:GeometRi.Rotation.Mult(GeometRi.Rotation)">
            <summary>
            Combine two rotations.
            </summary>
        </member>
        <member name="M:GeometRi.Rotation.Mult(GeometRi.Vector3d)">
            <summary>
            Multiply rotation matrix by vector.
            <para>The rotation matrix is first transformed into reference coordinate system of vector.</para>
            </summary>
        </member>
        <member name="M:GeometRi.Rotation.Mult(GeometRi.Point3d)">
            <summary>
            Multiply rotation matrix by point.
            <para>The rotation matrix is first transformed into reference coordinate system of point.</para>
            </summary>
        </member>
        <member name="M:GeometRi.Rotation.ConvertToGlobal">
            <summary>
            Convert rotation object to global coordinate system.
            </summary>
        </member>
        <member name="M:GeometRi.Rotation.ConvertTo(GeometRi.Coord3d)">
            <summary>
            Convert rotation object to reference coordinate system.
            </summary>
        </member>
        <member name="M:GeometRi.Rotation.Equals(System.Object)">
            <summary>
            Determines whether two objects are equal.
            </summary>
        </member>
        <member name="M:GeometRi.Rotation.GetHashCode">
            <summary>
            Returns the hashcode for the object.
            </summary>
        </member>
        <member name="M:GeometRi.Rotation.ToString">
            <summary>
            String representation of an object in global coordinate system.
            </summary>
        </member>
        <member name="M:GeometRi.Rotation.ToString(GeometRi.Coord3d)">
            <summary>
            String representation of an object in reference coordinate system.
            </summary>
        </member>
        <member name="M:GeometRi.Rotation.op_Multiply(GeometRi.Rotation,GeometRi.Rotation)">
            <summary>
            Combine two rotations.
            </summary>
        </member>
        <member name="M:GeometRi.Rotation.op_Multiply(GeometRi.Rotation,GeometRi.Vector3d)">
            <summary>
            Multiply rotation matrix by vector.
            <para>The rotation matrix is first transformed into reference coordinate system of vector.</para>
            </summary>
        </member>
        <member name="M:GeometRi.Rotation.op_Multiply(GeometRi.Rotation,GeometRi.Point3d)">
            <summary>
            Multiply rotation matrix by point.
            <para>The rotation matrix is first transformed into reference coordinate system of point.</para>
            </summary>
        </member>
        <member name="T:GeometRi.Segment3d">
            <summary>
            Line segment in 3D space defined by two end points.
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.#ctor(GeometRi.Point3d,GeometRi.Point3d)">
            <summary>
            Initializes line segment using two points.
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.Copy">
            <summary>
            Creates copy of the object
            </summary>
        </member>
        <member name="P:GeometRi.Segment3d.Direction">
            <summary>
            Direction vector of the segment
            </summary>
            <returns></returns>
        </member>
        <member name="M:GeometRi.Segment3d.IsParallelTo(GeometRi.ILinearObject)">
            <summary>
            Check if two objects are parallel
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.IsNotParallelTo(GeometRi.ILinearObject)">
            <summary>
            Check if two objects are NOT parallel
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.IsOrthogonalTo(GeometRi.ILinearObject)">
            <summary>
            Check if two objects are orthogonal
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.IsParallelTo(GeometRi.IPlanarObject)">
            <summary>
            Check if two objects are parallel
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.IsNotParallelTo(GeometRi.IPlanarObject)">
            <summary>
            Check if two objects are NOT parallel
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.IsOrthogonalTo(GeometRi.IPlanarObject)">
            <summary>
            Check if two objects are orthogonal
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.IsCoplanarTo(GeometRi.IPlanarObject)">
            <summary>
            Check if two objects are coplanar
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.IsCoplanarTo(GeometRi.ILinearObject)">
            <summary>
            Check if two objects are coplanar
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.DistanceTo(GeometRi.Point3d)">
            <summary>
            Returns shortest distance from segment to the point
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.ClosestPoint(GeometRi.Point3d)">
            <summary>
            Point on segment closest to target point "p".
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.DistanceTo(GeometRi.Plane3d)">
            <summary>
            Returns shortest distance from segment to the plane
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.DistanceTo(GeometRi.Line3d)">
            <summary>
            Returns shortest distance from segment to the line
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.DistanceTo(GeometRi.Segment3d)">
            <summary>
            Returns shortest distance between two segments
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.DistanceTo(GeometRi.Segment3d,GeometRi.Point3d@,GeometRi.Point3d@)">
            <summary>
            Returns shortest distance between two segments (with closest points)
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.DistanceTo(GeometRi.Ray3d)">
            <summary>
            Returns shortest distance from segment to ray
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.DistanceTo(GeometRi.Circle3d)">
            <summary>
            Shortest distance between segment and circle (including interior points)
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.DistanceTo(GeometRi.Circle3d,GeometRi.Point3d@,GeometRi.Point3d@)">
            <summary>
            Shortest distance between segment and circle (including interior points)
            </summary>
            <param name="c">Target circle</param>
            <param name="point_on_segment">Closest point on segment</param>
            <param name="point_on_circle">Closest point on circle</param>
        </member>
        <member name="M:GeometRi.Segment3d.DistanceTo(GeometRi.Triangle)">
            <summary>
            Shortest distance between segment and triangle
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.DistanceTo(GeometRi.Triangle,GeometRi.Point3d@,GeometRi.Point3d@)">
            <summary>
            Shortest distance between segment and triangle (with closest points)
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.BelongsTo(GeometRi.Line3d)">
            <summary>
            <para>Test if segment is located in the epsilon neighborhood of the line.</para>
            <para>Epsilon neighborhood is defined by a GeometRi3D.Tolerance property.</para>
            <para>For relative tolerance tests a fraction of the segment's length is used to define epsilon neighborhood.</para>
            </summary>
        </member>
        <member name="P:GeometRi.Segment3d.MinimumBoundingBox">
            <summary>
            Return minimum bounding box.
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.BoundingBox(GeometRi.Coord3d)">
            <summary>
            Return Axis Aligned Bounding Box (AABB) in given coordinate system.
            </summary>
        </member>
        <member name="P:GeometRi.Segment3d.BoundingSphere">
            <summary>
            Return bounding sphere.
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.IntersectionWith(GeometRi.Plane3d)">
            <summary>
            Get intersection of segment with plane.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.IntersectionWith(GeometRi.Line3d)">
            <summary>
            Get intersection of segment with line.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.IntersectionWith(GeometRi.Segment3d)">
            <summary>
            Get intersection of segment with other segment.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.IntersectionWith(GeometRi.Sphere)">
            <summary>
            Get intersection of segment with sphere.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.IntersectionWith(GeometRi.Ellipsoid)">
            <summary>
            Get intersection of segment with ellipsoid.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.IntersectionWith(GeometRi.Ellipse)">
            <summary>
            Get intersection of segment with ellipse.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.IntersectionWith(GeometRi.Circle3d)">
            <summary>
            Get intersection of segment with circle.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.IntersectionWith(GeometRi.Ray3d)">
            <summary>
            Get intersection of segment with ray.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.IntersectionWith(GeometRi.Triangle)">
            <summary>
            Get intersection of segment with triangle.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.IntersectionWith(GeometRi.Box3d)">
            <summary>
            Get intersection of segment with box.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.Intersects(GeometRi.Circle3d)">
            <summary>
            Intersection check between segment and circle
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.ProjectionTo(GeometRi.Line3d)">
            <summary>
            Get the orthogonal projection of a segment to the line.
            Return object of type 'Segment3d' or 'Point3d'
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.ProjectionTo(GeometRi.Plane3d)">
            <summary>
            Get the orthogonal projection of a segment to the plane.
            Return object of type 'Segment3d' or 'Point3d'
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.AngleTo(GeometRi.ILinearObject)">
            <summary>
            Angle between two objects in radians (0 &lt; angle &lt; Pi)
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.AngleToDeg(GeometRi.ILinearObject)">
            <summary>
            Angle between two objects in degrees (0 &lt; angle &lt; 180)
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.AngleTo(GeometRi.IPlanarObject)">
            <summary>
            Angle between two objects in radians (0 &lt; angle &lt; Pi)
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.AngleToDeg(GeometRi.IPlanarObject)">
            <summary>
            Angle between two objects in degrees (0 &lt; angle &lt; 180)
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.Translate(GeometRi.Vector3d)">
            <summary>
            Translate segment by a vector
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.Rotate(GeometRi.Matrix3d)">
            <summary>
            Rotate segment by a given rotation matrix
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.Rotate(GeometRi.Matrix3d,GeometRi.Point3d)">
            <summary>
            Rotate segment by a given rotation matrix around point 'p' as a rotation center
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.Rotate(GeometRi.Rotation,GeometRi.Point3d)">
            <summary>
            Rotate segment around point 'p' as a rotation center
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.ReflectIn(GeometRi.Point3d)">
            <summary>
            Reflect segment in given point
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.ReflectIn(GeometRi.Line3d)">
            <summary>
            Reflect segment in given line
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.ReflectIn(GeometRi.Plane3d)">
            <summary>
            Reflect segment in given plane
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.Equals(System.Object)">
            <summary>
            Determines whether two objects are equal.
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.GetHashCode">
            <summary>
            Returns the hashcode for the object.
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.ToString">
            <summary>
            String representation of an object in global coordinate system.
            </summary>
        </member>
        <member name="M:GeometRi.Segment3d.ToString(GeometRi.Coord3d)">
            <summary>
            String representation of an object in reference coordinate system.
            </summary>
        </member>
        <member name="T:GeometRi.Sphere">
            <summary>
            Sphere object defined by center point and radius.
            </summary>
        </member>
        <member name="M:GeometRi.Sphere.#ctor(GeometRi.Point3d,System.Double)">
            <summary>
            Initializes sphere using center point and radius.
            </summary>
        </member>
        <member name="M:GeometRi.Sphere.Copy">
            <summary>
            Creates copy of the object
            </summary>
        </member>
        <member name="P:GeometRi.Sphere.Center">
            <summary>
            Center of the sphere
            </summary>
        </member>
        <member name="P:GeometRi.Sphere.X">
            <summary>
            X component of the spheres' center
            </summary>
        </member>
        <member name="P:GeometRi.Sphere.Y">
            <summary>
            Y component of the spheres' center
            </summary>
        </member>
        <member name="P:GeometRi.Sphere.Z">
            <summary>
            Z component of the spheres' center
            </summary>
        </member>
        <member name="P:GeometRi.Sphere.R">
            <summary>
            Radius of the sphere
            </summary>
        </member>
        <member name="M:GeometRi.Sphere.DistanceTo(GeometRi.Point3d)">
            <summary>
            Shortest distance between point and sphere (including interior points).
            </summary>
        </member>
        <member name="M:GeometRi.Sphere.DistanceTo(GeometRi.Line3d)">
            <summary>
            Shortest distance between sphere and line
            </summary>
        </member>
        <member name="M:GeometRi.Sphere.DistanceTo(GeometRi.Ray3d)">
            <summary>
            Shortest distance between sphere and ray
            </summary>
        </member>
        <member name="M:GeometRi.Sphere.DistanceTo(GeometRi.Segment3d)">
            <summary>
            Shortest distance between sphere and segment
            </summary>
        </member>
        <member name="M:GeometRi.Sphere.DistanceTo(GeometRi.Plane3d)">
            <summary>
            Shortest distance between sphere and plane
            </summary>
        </member>
        <member name="M:GeometRi.Sphere.DistanceTo(GeometRi.Circle3d)">
            <summary>
            Shortest distance between sphere and circle (including interior points) (approximate solution)
            </summary>
        </member>
        <member name="M:GeometRi.Sphere.DistanceTo(GeometRi.Circle3d,GeometRi.Point3d@,GeometRi.Point3d@)">
            <summary>
            Shortest distance between sphere and circle (including interior points) (approximate solution).
            <para> The output points may be not unique in case of intersecting objects.</para>
            </summary>
            <param name="c">Target circle</param>
            <param name="p1">Closest point on sphere</param>
            <param name="p2">Closest point on circle</param>
        </member>
        <member name="M:GeometRi.Sphere.DistanceTo(GeometRi.Sphere)">
            <summary>
            Shortest distance between two spheres.
            <para> Zero distance is returned if one sphere located inside other.</para>
            </summary>
        </member>
        <member name="M:GeometRi.Sphere.DistanceTo(GeometRi.Sphere,GeometRi.Point3d@,GeometRi.Point3d@)">
            <summary>
            Shortest distance between two spheres.
            <para> Zero distance is returned if one sphere is located inside the other.</para>
            <para> The output points may be not unique in case of touching objects.</para>
            </summary>
            <param name="s">Target sphere</param>
            <param name="p1">Closest point on source sphere</param>
            <param name="p2">Closest point on target sphere</param>
        </member>
        <member name="M:GeometRi.Sphere.DistanceTo(GeometRi.Box3d)">
            <summary>
            Shortest distance from box to sphere
            </summary>
        </member>
        <member name="P:GeometRi.Sphere.MinimumBoundingBox">
            <summary>
            Return minimum bounding box.
            </summary>
        </member>
        <member name="M:GeometRi.Sphere.BoundingBox(GeometRi.Coord3d)">
            <summary>
            Return Axis Aligned Bounding Box (AABB) in given coordinate system.
            </summary>
        </member>
        <member name="P:GeometRi.Sphere.BoundingSphere">
            <summary>
            Return bounding sphere.
            </summary>
        </member>
        <member name="M:GeometRi.Sphere.IsInside(GeometRi.Box3d)">
            <summary>
            Check if sphere is located inside box with tolerance defined by global tolerance property (GeometRi3D.Tolerance).
            </summary>
        </member>
        <member name="M:GeometRi.Sphere.ClosestPoint(GeometRi.Point3d)">
            <summary>
            Point on sphere's surface closest to target point "p".
            </summary>
        </member>
        <member name="M:GeometRi.Sphere.IntersectionWith(GeometRi.Line3d)">
            <summary>
            Get intersection of line with sphere.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Sphere.IntersectionWith(GeometRi.Segment3d)">
            <summary>
            Get intersection of segment with sphere.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Sphere.IntersectionWith(GeometRi.Ray3d)">
            <summary>
            Get intersection of ray with sphere.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Sphere.IntersectionWith(GeometRi.Plane3d)">
            <summary>
            Get intersection of plane with sphere.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Circle3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Sphere.IntersectionWith(GeometRi.Sphere)">
            <summary>
            Get intersection of two spheres.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Circle3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Sphere.Intersects(GeometRi.Circle3d)">
            <summary>
            Intersection check between circle and sphere
            </summary>
        </member>
        <member name="M:GeometRi.Sphere.Intersects(GeometRi.Triangle)">
            <summary>
            Intersection check between sphere and triangle
            </summary>
        </member>
        <member name="M:GeometRi.Sphere.ProjectionTo(GeometRi.Plane3d)">
            <summary>
            Orthogonal projection of the sphere to the plane
            </summary>
        </member>
        <member name="M:GeometRi.Sphere.ProjectionTo(GeometRi.Line3d)">
            <summary>
            Orthogonal projection of the sphere to the line
            </summary>
        </member>
        <member name="M:GeometRi.Sphere.Translate(GeometRi.Vector3d)">
            <summary>
            Translate sphere by a vector
            </summary>
        </member>
        <member name="M:GeometRi.Sphere.Rotate(GeometRi.Matrix3d)">
            <summary>
            Rotate sphere by a given rotation matrix
            </summary>
        </member>
        <member name="M:GeometRi.Sphere.Rotate(GeometRi.Matrix3d,GeometRi.Point3d)">
            <summary>
            Rotate sphere by a given rotation matrix around point 'p' as a rotation center
            </summary>
        </member>
        <member name="M:GeometRi.Sphere.Rotate(GeometRi.Rotation,GeometRi.Point3d)">
            <summary>
            Rotate sphere around point 'p' as a rotation center
            </summary>
        </member>
        <member name="M:GeometRi.Sphere.ReflectIn(GeometRi.Point3d)">
            <summary>
            Reflect sphere in given point
            </summary>
        </member>
        <member name="M:GeometRi.Sphere.ReflectIn(GeometRi.Line3d)">
            <summary>
            Reflect sphere in given line
            </summary>
        </member>
        <member name="M:GeometRi.Sphere.ReflectIn(GeometRi.Plane3d)">
            <summary>
            Reflect sphere in given plane
            </summary>
        </member>
        <member name="M:GeometRi.Sphere.Equals(System.Object)">
            <summary>
            Determines whether two objects are equal.
            </summary>
        </member>
        <member name="M:GeometRi.Sphere.GetHashCode">
            <summary>
            Returns the hashcode for the object.
            </summary>
        </member>
        <member name="M:GeometRi.Sphere.ToString">
            <summary>
            String representation of an object in global coordinate system.
            </summary>
        </member>
        <member name="M:GeometRi.Sphere.ToString(GeometRi.Coord3d)">
            <summary>
            String representation of an object in reference coordinate system.
            </summary>
        </member>
        <member name="M:GeometRi.Tetrahedron.#ctor">
            <summary>
            Regular tetrahedron with vertices (0, 0, 0), (0, 1, 1), (1, 0, 1), (1, 1, 0)
            </summary>
        </member>
        <member name="M:GeometRi.Tetrahedron.Copy">
            <summary>
            Creates copy of the object
            </summary>
        </member>
        <member name="P:GeometRi.Tetrahedron.ListOfFaces">
            <summary>
            List of faces forming the tetrahedron
            </summary>
        </member>
        <member name="P:GeometRi.Tetrahedron.ListOfEdges">
            <summary>
            List of edges forming the tetragedron
            </summary>
        </member>
        <member name="P:GeometRi.Tetrahedron.Volume">
            <summary>
            Volume of the tetrahedron.
            </summary>
        </member>
        <member name="P:GeometRi.Tetrahedron.Area">
            <summary>
            Surface area of the tetrahedron.
            </summary>
        </member>
        <member name="P:GeometRi.Tetrahedron.MinimumBoundingBox">
            <summary>
            Return minimum bounding box.
            </summary>
        </member>
        <member name="M:GeometRi.Tetrahedron.BoundingBox(GeometRi.Coord3d)">
            <summary>
            Return Axis Aligned Bounding Box (AABB) in given coordinate system.
            </summary>
        </member>
        <member name="P:GeometRi.Tetrahedron.BoundingSphere">
            <summary>
            Return bounding sphere.
            </summary>
        </member>
        <member name="M:GeometRi.Tetrahedron.DistanceTo(GeometRi.Point3d)">
            <summary>
            Distance from tetrahedron to point (zero will be returned for point located inside box)
            </summary>
        </member>
        <member name="M:GeometRi.Tetrahedron.ClosestPoint(GeometRi.Point3d)">
            <summary>
            Point on tetrahedron (including interior points) closest to target point "p".
            </summary>
        </member>
        <member name="M:GeometRi.Tetrahedron.DistanceTo(GeometRi.Tetrahedron)">
            <summary>
            Distance between two tetrahedrones
            </summary>
        </member>
        <member name="M:GeometRi.Tetrahedron.Intersects(GeometRi.Tetrahedron)">
            <summary>
            Check intersection of two tetrahedrons
            </summary>
        </member>
        <member name="M:GeometRi.Tetrahedron.IntersectsFast(GeometRi.Tetrahedron)">
            <summary>
            Check intersection of two tetrahedrons
            </summary>
        </member>
        <member name="M:GeometRi.Tetrahedron.Intersects(GeometRi.Triangle)">
            <summary>
            Check intersection of tetrahedron with triangle
            </summary>
        </member>
        <member name="M:GeometRi.Tetrahedron.Intersects(GeometRi.Line3d)">
            <summary>
            Check intersection of tetrahedron with line
            </summary>
        </member>
        <member name="M:GeometRi.Tetrahedron.Intersects(GeometRi.Ray3d)">
            <summary>
            Check intersection of tetrahedron with ray
            </summary>
        </member>
        <member name="M:GeometRi.Tetrahedron.Intersects(GeometRi.Segment3d)">
            <summary>
            Check intersection of tetrahedron with segment
            </summary>
        </member>
        <member name="M:GeometRi.Tetrahedron.Intersects(GeometRi.Box3d)">
            <summary>
            Check intersection of tetrahedron with box
            </summary>
        </member>
        <member name="M:GeometRi.Tetrahedron.Intersects(GeometRi.Sphere)">
            <summary>
            Check intersection of tetrahedron with sphere
            </summary>
        </member>
        <member name="M:GeometRi.Tetrahedron.IntersectionWith(GeometRi.Line3d)">
            <summary>
            Get intersection of line with tetrahedron.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Tetrahedron.IsInside(GeometRi.Box3d)">
            <summary>
            Check if tetrahedron is located inside box with tolerance defined by global tolerance property (GeometRi3D.Tolerance).
            </summary>
        </member>
        <member name="M:GeometRi.Tetrahedron.Translate(GeometRi.Vector3d)">
            <summary>
            Translate tetrahedron by a vector
            </summary>
        </member>
        <member name="M:GeometRi.Tetrahedron.Rotate(GeometRi.Rotation,GeometRi.Point3d)">
            <summary>
            Rotate tetrahedron around point 'p' as a rotation center.
            </summary>
        </member>
        <member name="M:GeometRi.Tetrahedron.ReflectIn(GeometRi.Point3d)">
            <summary>
            Reflect tetrahedron in given point
            </summary>
        </member>
        <member name="M:GeometRi.Tetrahedron.ReflectIn(GeometRi.Line3d)">
            <summary>
            Reflect tetrahedron in given line
            </summary>
        </member>
        <member name="M:GeometRi.Tetrahedron.ReflectIn(GeometRi.Plane3d)">
            <summary>
            Reflect tetrahedron in given plane
            </summary>
        </member>
        <member name="M:GeometRi.Tetrahedron.Scale(System.Double)">
            <summary>
            Scale tetrahedron
            </summary>
        </member>
        <member name="M:GeometRi.Tetrahedron.Scale(System.Double,System.Double,System.Double)">
            <summary>
            Scale tetrahedron
            </summary>
        </member>
        <member name="M:GeometRi.Tetrahedron.Equals(System.Object)">
            <summary>
            Determines whether two objects are equal.
            </summary>
        </member>
        <member name="M:GeometRi.Tetrahedron.GetHashCode">
            <summary>
            Returns the hashcode for the object.
            </summary>
        </member>
        <member name="M:GeometRi.Tetrahedron.ToString">
            <summary>
            String representation of an object in global coordinate system.
            </summary>
        </member>
        <member name="M:GeometRi.Tetrahedron.ToString(GeometRi.Coord3d)">
            <summary>
            String representation of an object in reference coordinate system.
            </summary>
        </member>
        <member name="T:GeometRi.Triangle">
            <summary>
            Triangle in 3D space defined by three points.
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.#ctor(GeometRi.Point3d,GeometRi.Point3d,GeometRi.Point3d)">
            <summary>
            Initializes triangle object using three points.
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.Copy">
            <summary>
            Creates copy of the object
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.A">
            <summary>
            First point of triangle
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.B">
            <summary>
            Second point of triangle
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.C">
            <summary>
            Third point of triangle
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.AB">
            <summary>
            Length of AB side
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.AC">
            <summary>
            Length of AC side
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.BC">
            <summary>
            Length of BC side
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.Perimeter">
            <summary>
            Perimeter of the triangle
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.Area">
            <summary>
            Area of the triangle
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.ToPlane">
            <summary>
            Convert triangle to plane object.
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.Circumcircle">
            <summary>
            Circumcircle of the triangle
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.Angle_A">
            <summary>
            Angle at the vertex A
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.Angle_B">
            <summary>
            Angle at the vertex B
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.Angle_C">
            <summary>
            Angle at the vertex C
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.Bisector_A">
            <summary>
            Angle bisector at the vertex A
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.Bisector_B">
            <summary>
            Angle bisector at the vertex B
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.Bisector_C">
            <summary>
            Angle bisector at the vertex C
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.ExternalBisector_A">
            <summary>
            External angle bisector at the vertex A
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.ExternalBisector_B">
            <summary>
            External angle bisector at the vertex B
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.ExternalBisector_C">
            <summary>
            External angle bisector at the vertex C
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.Incenter">
            <summary>
            Incenter of the triangle
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.Centroid">
            <summary>
            Centroid of the triangle
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.Orthocenter">
            <summary>
            Orthocenter of the triangle
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.Circumcenter">
            <summary>
            Circumcenter of the triangle
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.Incircle">
            <summary>
            Incircle of the triangle
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.Altitude_A">
            <summary>
            Altitude at the vertex A
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.Altitude_B">
            <summary>
            Altitude at the vertex B
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.Altitude_C">
            <summary>
            Altitude at the vertex C
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.Median_A">
            <summary>
            Median at the vertex A
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.Median_B">
            <summary>
            Median at the vertex B
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.Median_C">
            <summary>
            Median at the vertex C
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.IsEquilateral">
            <summary>
            True if all sides of the triangle are the same length
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.IsIsosceles">
            <summary>
            True if two sides of the triangle are the same length
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.IsScalene">
            <summary>
            True if all sides are unequal
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.IsRight">
            <summary>
            True if one angle is equal 90 degrees
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.IsObtuse">
            <summary>
            True if one angle is greater than 90 degrees
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.IsAcute">
            <summary>
            True if all angles are less than 90 degrees
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.IsParallelTo(GeometRi.ILinearObject)">
            <summary>
            Check if two objects are parallel
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.IsNotParallelTo(GeometRi.ILinearObject)">
            <summary>
            Check if two objects are NOT parallel
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.IsOrthogonalTo(GeometRi.ILinearObject)">
            <summary>
            Check if two objects are orthogonal
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.IsParallelTo(GeometRi.IPlanarObject)">
            <summary>
            Check if two objects are parallel
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.IsNotParallelTo(GeometRi.IPlanarObject)">
            <summary>
            Check if two objects are NOT parallel
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.IsOrthogonalTo(GeometRi.IPlanarObject)">
            <summary>
            Check if two objects are orthogonal
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.IsCoplanarTo(GeometRi.IPlanarObject)">
            <summary>
            Check if two objects are coplanar
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.IsCoplanarTo(GeometRi.ILinearObject)">
            <summary>
            Check if two objects are coplanar
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.MinimumBoundingBox">
            <summary>
            Return minimum bounding box.
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.BoundingBox(GeometRi.Coord3d)">
            <summary>
            Return Axis Aligned Bounding Box (AABB) in given coordinate system.
            </summary>
        </member>
        <member name="P:GeometRi.Triangle.BoundingSphere">
            <summary>
            Return bounding sphere.
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.DistanceTo(GeometRi.Point3d)">
            <summary>
            Shortest distance between triangle and point
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.ClosestPoint(GeometRi.Point3d)">
            <summary>
            Calculates the point on the triangle closest to given point.
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.DistanceTo(GeometRi.Circle3d)">
            <summary>
            Shortest distance between triangle and circle (including interior points)
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.DistanceTo(GeometRi.Circle3d,GeometRi.Point3d@,GeometRi.Point3d@)">
            <summary>
            Shortest distance between triangle and circle (including interior points)
            </summary>
            <param name="c">Target circle</param>
            <param name="point_on_triangle">Closest point on triangle</param>
            <param name="point_on_circle">Closest point on circle</param>
        </member>
        <member name="M:GeometRi.Triangle.DistanceTo(GeometRi.Segment3d)">
            <summary>
            Shortest distance between triangle and segment
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.DistanceTo(GeometRi.Segment3d,GeometRi.Point3d@,GeometRi.Point3d@)">
            <summary>
            Shortest distance between triangle and segment (with closest points)
            </summary>
        </member>
        <member name="M:GeometRi.Triangle._DistanceToSegment(GeometRi.Segment3d)">
            <summary>
            Shortest distance between triangle and segment
            </summary>
        </member>
        <member name="M:GeometRi.Triangle._DistanceToSegment_with_points(GeometRi.Segment3d,GeometRi.Point3d@,GeometRi.Point3d@)">
            <summary>
            Shortest distance between triangle and segment
            </summary>
            <param name="s">Target segment</param>
            <param name="point_on_triangle">Closest point on triangle</param>
            <param name="point_on_segment">Closest point on segment</param>
        </member>
        <member name="M:GeometRi.Triangle.DistanceTo(GeometRi.Triangle)">
            <summary>
            Shortest distance between two triangles
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.DistanceTo(GeometRi.Triangle,GeometRi.Point3d@,GeometRi.Point3d@)">
            <summary>
            Shortest distance between two triangles (with closest points)
            </summary>
        </member>
        <member name="M:GeometRi.Triangle._DistanceToTriangle(GeometRi.Triangle)">
            <summary>
            Shortest distance between two triangles
            </summary>
        </member>
        <member name="M:GeometRi.Triangle._DistanceToTriangle(GeometRi.Triangle,GeometRi.Point3d@,GeometRi.Point3d@)">
            <summary>
            Shortest distance between two triangles (with closest points)
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.ProjectionTo(GeometRi.Line3d)">
            <summary>
            Orthogonal projection of the triangle to line
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.IntersectionWith(GeometRi.Line3d)">
            <summary>
            Get intersection of line with triangle.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.IntersectionWith(GeometRi.Plane3d)">
            <summary>
            Get intersection of plane with triangle.
            Returns 'null' (no intersection) or object of type 'Triangle', 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Triangle._coplanar_IntersectionWith(GeometRi.Line3d)">
            <summary>
            Get intersection of line with triangle (coplanar).
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.IntersectionWith(GeometRi.Segment3d)">
            <summary>
            Get intersection of segment with triangle.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.IntersectionWith(GeometRi.Ray3d)">
            <summary>
            Get intersection of ray with triangle.
            Returns 'null' (no intersection) or object of type 'Point3d' or 'Segment3d'.
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.Intersects(GeometRi.Circle3d)">
            <summary>
            Intersection check between circle and triangle
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.Intersects(GeometRi.Tetrahedron)">
            <summary>
            Intersection check between tetrahedron and triangle
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.Intersects(GeometRi.Sphere)">
            <summary>
            Intersection check between triangle and sphere
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.Intersects(GeometRi.Triangle)">
            <summary>
            Intersection check between two triangles
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.Intersects(GeometRi.Box3d)">
            <summary>
            Check intersection of triangle with box
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.AngleTo(GeometRi.ILinearObject)">
            <summary>
            Angle between two objects in radians (0 &lt; angle &lt; Pi)
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.AngleToDeg(GeometRi.ILinearObject)">
            <summary>
            Angle between two objects in degrees (0 &lt; angle &lt; 180)
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.AngleTo(GeometRi.IPlanarObject)">
            <summary>
            Angle between two objects in radians (0 &lt; angle &lt; Pi)
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.AngleToDeg(GeometRi.IPlanarObject)">
            <summary>
            Angle between two objects in degrees (0 &lt; angle &lt; 180)
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.Translate(GeometRi.Vector3d)">
            <summary>
            Translate triangle by a vector
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.Rotate(GeometRi.Matrix3d)">
            <summary>
            Rotate triangle by a given rotation matrix
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.Rotate(GeometRi.Matrix3d,GeometRi.Point3d)">
            <summary>
            Rotate triangle by a given rotation matrix around point 'p' as a rotation center
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.Rotate(GeometRi.Rotation,GeometRi.Point3d)">
            <summary>
            Rotate triangle around point 'p' as a rotation center
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.ReflectIn(GeometRi.Point3d)">
            <summary>
            Reflect triangle in given point
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.ReflectIn(GeometRi.Line3d)">
            <summary>
            Reflect triangle in given line
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.ReflectIn(GeometRi.Plane3d)">
            <summary>
            Reflect triangle in given plane
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.Equals(System.Object)">
            <summary>
            Determines whether two objects are equal.
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.GetHashCode">
            <summary>
            Returns the hashcode for the object.
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.ToString">
            <summary>
            String representation of an object in global coordinate system.
            </summary>
        </member>
        <member name="M:GeometRi.Triangle.ToString(GeometRi.Coord3d)">
            <summary>
            String representation of an object in reference coordinate system.
            </summary>
        </member>
        <member name="T:GeometRi.Vector3d">
            <summary>
            Vector in 3D space defined in global or local reference frame.
            </summary>
        </member>
        <member name="M:GeometRi.Vector3d.#ctor(GeometRi.Coord3d)">
            <summary>
            Default constructor, initializes zero vector.
            </summary>
            <param name="coord">Reference coordinate system (default - Coord3d.GlobalCS).</param>
        </member>
        <member name="M:GeometRi.Vector3d.#ctor(System.Double,System.Double,System.Double,GeometRi.Coord3d)">
            <summary>
            Initializes vector object using components in reference coordinate system.
            </summary>
            <param name="coord">Reference coordinate system (default - Coord3d.GlobalCS).</param>
        </member>
        <member name="M:GeometRi.Vector3d.#ctor(GeometRi.Point3d,GeometRi.Coord3d)">
            <summary>
            Initializes vector object as radius vector of a point in reference coordinate system.
            </summary>
        </member>
        <member name="M:GeometRi.Vector3d.#ctor(GeometRi.Point3d,GeometRi.Point3d)">
            <summary>
            Initializes vector object using two points in reference coordinate system of the first point.
            </summary>
            <param name="p1">Start point.</param>
            <param name="p2">End point.</param>
        </member>
        <member name="M:GeometRi.Vector3d.#ctor(System.Double[],GeometRi.Coord3d)">
            <summary>
            Initializes vector using double array.
            </summary>
            <param name="coord">Reference coordinate system (default - Coord3d.GlobalCS).</param>
        </member>
        <member name="M:GeometRi.Vector3d.Random">
            <summary>
            Uniformly distrbuted random vector of unit length
            </summary>
        </member>
        <member name="M:GeometRi.Vector3d.Copy">
            <summary>
            Creates copy of the object
            </summary>
        </member>
        <member name="P:GeometRi.Vector3d.X">
            <summary>
            X component in reference coordinate system
            </summary>
        </member>
        <member name="P:GeometRi.Vector3d.Y">
            <summary>
            Y component in reference coordinate system
            </summary>
        </member>
        <member name="P:GeometRi.Vector3d.Z">
            <summary>
            Z component in reference coordinate system
            </summary>
        </member>
        <member name="P:GeometRi.Vector3d.Norm">
            <summary>
            Norm of a vector
            </summary>
        </member>
        <member name="P:GeometRi.Vector3d.MinElement">
            <summary>
            Minimal element of a vector
            </summary>
        </member>
        <member name="P:GeometRi.Vector3d.MaxElement">
            <summary>
            Maximal element of a vector
            </summary>
        </member>
        <member name="P:GeometRi.Vector3d.Coord">
            <summary>
             Reference coordinate system
            </summary>
        </member>
        <member name="P:GeometRi.Vector3d.ToLine">
            <summary>
            Returns line passing through origin in the direction of vector
            </summary>
        </member>
        <member name="M:GeometRi.Vector3d.IsParallelTo(GeometRi.ILinearObject)">
            <summary>
            Check if two objects are parallel
            </summary>
        </member>
        <member name="M:GeometRi.Vector3d.IsNotParallelTo(GeometRi.ILinearObject)">
            <summary>
            Check if two objects are NOT parallel
            </summary>
        </member>
        <member name="M:GeometRi.Vector3d.IsOrthogonalTo(GeometRi.ILinearObject)">
            <summary>
            Check if two objects are orthogonal
            </summary>
        </member>
        <member name="M:GeometRi.Vector3d.IsParallelTo(GeometRi.IPlanarObject)">
            <summary>
            Check if two objects are parallel
            </summary>
        </member>
        <member name="M:GeometRi.Vector3d.IsNotParallelTo(GeometRi.IPlanarObject)">
            <summary>
            Check if two objects are NOT parallel
            </summary>
        </member>
        <member name="M:GeometRi.Vector3d.IsOrthogonalTo(GeometRi.IPlanarObject)">
            <summary>
            Check if two objects are orthogonal
            </summary>
        </member>
        <member name="P:GeometRi.Vector3d.ToPoint">
            <summary>
            Point, represented by vector starting in origin
            </summary>
        </member>
        <member name="P:GeometRi.Vector3d.Normalized">
            <summary>
            Return normalized vector
            </summary>
        </member>
        <member name="M:GeometRi.Vector3d.Normalize">
            <summary>
            Normalize the current vector
            </summary>
        </member>
        <member name="M:GeometRi.Vector3d.Dot(GeometRi.Vector3d)">
            <summary>
            Dot product of two vectors
            </summary>
        </member>
        <member name="M:GeometRi.Vector3d.Cross(GeometRi.Vector3d)">
            <summary>
            Cross product of two vectors
            </summary>
        </member>
        <member name="M:GeometRi.Vector3d.ConvertTo(GeometRi.Coord3d)">
            <summary>
            Convert vector to reference coordinate system.
            </summary>
        </member>
        <member name="M:GeometRi.Vector3d.ConvertToGlobal">
            <summary>
            Convert vector to global coordinate system
            </summary>
        </member>
        <member name="M:GeometRi.Vector3d.AngleTo(GeometRi.ILinearObject)">
            <summary>
            Angle between two objects in radians (0 &lt; angle &lt; Pi)
            </summary>
        </member>
        <member name="M:GeometRi.Vector3d.AngleToDeg(GeometRi.ILinearObject)">
            <summary>
            Angle between two objects in degrees (0 &lt; angle &lt; 180)
            </summary>
        </member>
        <member name="M:GeometRi.Vector3d.AngleTo(GeometRi.IPlanarObject)">
            <summary>
            Angle between two objects in radians (0 &lt; angle &lt; Pi)
            </summary>
        </member>
        <member name="M:GeometRi.Vector3d.AngleToDeg(GeometRi.IPlanarObject)">
            <summary>
            Angle between two objects in degrees (0 &lt; angle &lt; 180)
            </summary>
        </member>
        <member name="M:GeometRi.Vector3d.ProjectionTo(GeometRi.Vector3d)">
            <summary>
            Return projection of the current vector to the second vector
            </summary>
        </member>
        <member name="P:GeometRi.Vector3d.OrthogonalVector">
            <summary>
            Return arbitrary vector, orthogonal to the current vector
            </summary>
        </member>
        <member name="M:GeometRi.Vector3d.Rotate(GeometRi.Matrix3d)">
            <summary>
            Rotate vector by a given rotation matrix
            </summary>
        </member>
        <member name="M:GeometRi.Vector3d.Rotate(GeometRi.Rotation)">
            <summary>
            Rotate vector
            </summary>
        </member>
        <member name="M:GeometRi.Vector3d.ReflectIn(GeometRi.Point3d)">
            <summary>
            Reflect vector in given point
            </summary>
        </member>
        <member name="M:GeometRi.Vector3d.ReflectIn(GeometRi.Line3d)">
            <summary>
            Reflect vector in given line
            </summary>
        </member>
        <member name="M:GeometRi.Vector3d.ReflectIn(GeometRi.Plane3d)">
            <summary>
            Reflect vector in given plane
            </summary>
        </member>
        <member name="M:GeometRi.Vector3d.Equals(System.Object)">
            <summary>
            Determines whether two objects are equal.
            </summary>
        </member>
        <member name="M:GeometRi.Vector3d.GetHashCode">
            <summary>
            Returns the hashcode for the object.
            </summary>
        </member>
        <member name="M:GeometRi.Vector3d.ToString">
            <summary>
            String representation of an object in global coordinate system.
            </summary>
        </member>
        <member name="M:GeometRi.Vector3d.ToString(GeometRi.Coord3d)">
            <summary>
            String representation of an object in reference coordinate system.
            </summary>
        </member>
        <member name="M:GeometRi.Vector3d.op_Multiply(GeometRi.Vector3d,GeometRi.Vector3d)">
            <summary>
            Dot product of two vectors
            </summary>
        </member>
    </members>
</doc>
